{"main":{"slug":"CirclePack.html.svelte","contents":"<!--\n  @component\n  Generates an HTML circle pack chart using [d3-hierarchy](https://github.com/d3/d3-hierarchy).\n -->\n<script>\n  import { stratify, pack, hierarchy } from 'd3-hierarchy';\n  import { getContext } from 'svelte';\n  import { format } from 'd3-format';\n\n  const { width, height, data } = getContext('LayerCake');\n\n  /** @type {String} [idKey='id'] - The key on each object where the id value lives. */\n  export let idKey = 'id';\n\n  /** @type {String|undefined} [parentKey] - Set this if you want to define one parent circle. This will give you a [nested](https://layercake.graphics/example/CirclePackNested) graphic versus a [grouping of circles](https://layercake.graphics/example/CirclePack). */\n  export let parentKey = undefined;\n\n  /** @type {String} [valueKey='value'] - The key on each object where the data value lives. */\n  export let valueKey = 'value';\n\n  /** @type {Function} [labelVisibilityThreshold=r => r > 25] - By default, only show the text inside a circle if its radius exceeds a certain size. Provide your own function for different behavior. */\n  export let labelVisibilityThreshold = r => r > 25;\n\n  /** @type {String} [fill='#fff'] - The circle's fill color. */\n  export let fill = '#fff';\n\n  /** @type {String} [stroke='#999'] - The circle's stroke color. */\n  export let stroke = '#999';\n\n  /** @type {Number} [strokeWidth=1] - The circle's stroke width, in pixels. */\n  export let strokeWidth = 1;\n\n  /** @type {String} [textColor='#333'] - The label text color. */\n  export let textColor = '#333';\n\n  /** @type {String} [textStroke='#000'] - The label text's stroke color. */\n  export let textStroke = '#000';\n\n  /** @type {Number} [textStrokeWidth=0] - The label text's stroke width, in pixels. */\n  export let textStrokeWidth = 0;\n\n  /** @type {Function} [sortBy=(a, b) => b.value - a.value] - The order in which circle's are drawn. Sorting on the `depth` key is also a popular choice. */\n  export let sortBy = (a, b) => b.value - a.value; // 'depth' is also a popular choice\n\n  /** @type {Number} [spacing=0] - Whitespace padding between each circle, in pixels. */\n  export let spacing = 0;\n\n  /* --------------------------------------------\n   * This component will automatically group your data\n   * into one group if no `parentKey` was passed in.\n   * Stash $data here so we can add our own parent\n   * if there's no `parentKey`\n   */\n  let parent = {};\n  $: dataset = $data;\n\n  $: if (parentKey === undefined) {\n    parent = { [idKey]: 'all' };\n    dataset = [...dataset, parent];\n  }\n\n  $: stratifier = stratify()\n    .id(d => d[idKey])\n    .parentId(d => {\n      if (d[idKey] === parent[idKey]) return '';\n      return d[parentKey] || parent[idKey];\n    });\n\n  $: packer = pack().size([$width, $height]).padding(spacing);\n\n  $: stratified = stratifier(dataset);\n\n  $: root = hierarchy(stratified)\n    .sum(d => {\n      return d.data[valueKey] || 1;\n    })\n    .sort(sortBy);\n\n  $: packed = packer(root);\n\n  $: descendants = packed.descendants();\n\n  const titleCase = d => d.replace(/^\\w/, w => w.toUpperCase());\n  const commas = format(',');\n</script>\n\n<div class=\"circle-pack\" data-has-parent-key={parentKey !== undefined}>\n  {#each descendants as d}\n    <div class=\"circle-group\" data-id={d.data.id} data-visible={labelVisibilityThreshold(d.r)}>\n      <div\n        class=\"circle\"\n        style:left=\"{d.x}px\"\n        style:top=\"{d.y}px\"\n        style:width=\"{d.r * 2}px\"\n        style:height=\"{d.r * 2}px\"\n        style:background-color={fill}\n        style:border=\"{strokeWidth}px solid {stroke}\"\n      ></div>\n      <div\n        class=\"text-group\"\n        style=\"\n            color:{textColor};\n            text-shadow:\n              -{textStrokeWidth}px -{textStrokeWidth}px 0 {textStroke},\n              {textStrokeWidth}px -{textStrokeWidth}px 0 {textStroke},\n              -{textStrokeWidth}px {textStrokeWidth}px 0 {textStroke},\n              {textStrokeWidth}px {textStrokeWidth}px 0 {textStroke};\n            left:{d.x}px;\n            top:{d.y - (labelVisibilityThreshold(d.r) ? 0 : d.r + 4)}px;\n          \"\n      >\n        <div class=\"text\">{titleCase(d.data.id)}</div>\n        {#if d.data.data[valueKey]}\n          <div class=\"text value\">{commas(d.data.data[valueKey])}</div>\n        {/if}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .circle-pack {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n  .circle,\n  .text-group {\n    position: absolute;\n  }\n  .circle {\n    transform: translate(-50%, -50%);\n  }\n  /* Hide the root node if we want, useful if we are creating our own root */\n  .circle-pack[data-has-parent-key='false'] .circle-group[data-id='all'] {\n    display: none;\n  }\n  /* .circle-group:hover {\n    z-index: 9999;\n  } */\n  .circle-group[data-visible='false'] .text-group {\n    display: none;\n    padding: 4px 7px;\n    background: #fff;\n    border: 1px solid #ccc;\n    transform: translate(-50%, -100%);\n    top: -4px;\n  }\n  .circle-group[data-visible='false']:hover .text-group {\n    z-index: 999;\n    display: block !important;\n    /* On hover, set the text color to black and eliminate the shadow */\n    text-shadow: none !important;\n    color: #000 !important;\n  }\n  .circle-group[data-visible='false']:hover .circle {\n    border-color: #000 !important;\n  }\n  .text-group {\n    width: auto;\n    top: 50%;\n    left: 50%;\n    text-align: center;\n    transform: translate(-50%, -50%);\n    white-space: nowrap;\n    pointer-events: none;\n    cursor: pointer;\n    line-height: 13px;\n  }\n  .text {\n    width: 100%;\n    font-size: 11px;\n    /* text-shadow: -1px -1px 0 #fff, 1px -1px 0 #fff, -1px 1px 0 #fff, 1px 1px 0 #fff; */\n  }\n  .text.value {\n    font-size: 11px;\n  }\n  .circle {\n    border-radius: 50%;\n    top: 0;\n    left: 0;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/CirclePack","/example/CirclePackNested"]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"The key on each object where the id value lives.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"idKey","default":"'id'"},{"title":"param","description":"Set this if you want to define one parent circle. This will give you a [nested](https://layercake.graphics/example/CirclePackNested) graphic versus a [grouping of circles](https://layercake.graphics/example/CirclePack).","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"UndefinedLiteral"}]}},"name":"parentKey"},{"title":"param","description":"The key on each object where the data value lives.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"valueKey","default":"'value'"},{"title":"param","description":"By default, only show the text inside a circle if its radius exceeds a certain size. Provide your own function for different behavior.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"labelVisibilityThreshold","default":"r=>r>25"},{"title":"param","description":"The circle's fill color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"fill","default":"'#fff'"},{"title":"param","description":"The circle's stroke color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"stroke","default":"'#999'"},{"title":"param","description":"The circle's stroke width, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"strokeWidth","default":"1"},{"title":"param","description":"The label text color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"textColor","default":"'#333'"},{"title":"param","description":"The label text's stroke color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"textStroke","default":"'#000'"},{"title":"param","description":"The label text's stroke width, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"textStrokeWidth","default":"0"},{"title":"param","description":"The order in which circle's are drawn. Sorting on the `depth` key is also a popular choice.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"sortBy","default":"(a,b)=>b.value-a.value"},{"title":"param","description":"Whitespace padding between each circle, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"spacing","default":"0"}]},"componentDescription":"Generates an HTML circle pack chart using [d3-hierarchy](https://github.com/d3/d3-hierarchy).","modules":[]}