{"main":{"slug":"Beeswarm.svelte","contents":"<!--\n  @component\n  Generates an SVG Beeswarm chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, zGet, height, config } = getContext('LayerCake');\n\n  /** @type {Number} [r=3] - The circle radius size in pixels. */\n  export let r = 3;\n\n  /** @type {Number} [strokeWidth=0] - The circle's stroke width in pixels. */\n  export let strokeWidth = 0;\n\n  /** @type {String} [stroke='#fff'] - The circle's stroke color. */\n  export let stroke = '#fff';\n\n  /** @type {Number} [spacing=1.5] - Whitespace padding between each circle, in pixels */\n  export let spacing = 1.5;\n\n  /** @type {Function|undefined} [getTitle] — An accessor function to get the field on the data element to display as a hover label using a `<title>` tag. */\n  export let getTitle = undefined;\n\n  $: circles = dodge($data, { rds: r * 2 + spacing + strokeWidth, x: $xGet });\n\n  function dodge(data, { rds = 1, x = d => d } = {}) {\n    const radius2 = rds ** 2;\n    const circles = data\n      .map(d => ({ x: x(d), [$config.z]: d[$config.z], data: d }))\n      .sort((a, b) => a.x - b.x);\n    const epsilon = 1e-3;\n    let head = null,\n      tail = null;\n\n    // Returns true if circle ⟨x,y⟩ intersects with any circle in the queue.\n    function intersects(x, y) {\n      let a = head;\n      while (a) {\n        if (radius2 - epsilon > (a.x - x) ** 2 + (a.y - y) ** 2) {\n          return true;\n        }\n        a = a.next;\n      }\n      return false;\n    }\n\n    // Place each circle sequentially.\n    for (const b of circles) {\n      // Remove circles from the queue that can’t intersect the new circle b.\n      while (head && head.x < b.x - radius2) head = head.next;\n\n      // Choose the minimum non-intersecting tangent.\n      if (intersects(b.x, (b.y = 0))) {\n        let a = head;\n        b.y = Infinity;\n        do {\n          let y = a.y + Math.sqrt(radius2 - (a.x - b.x) ** 2);\n          if (y < b.y && !intersects(b.x, y)) b.y = y;\n          a = a.next;\n        } while (a);\n      }\n\n      // Add b to the queue.\n      b.next = null;\n      if (head === null) head = tail = b;\n      else tail = tail.next = b;\n    }\n\n    return circles;\n  }\n</script>\n\n<g class=\"bee-group\">\n  {#each circles as d}\n    <circle\n      fill={$zGet(d)}\n      {stroke}\n      stroke-width={strokeWidth}\n      cx={d.x}\n      cy={$height - r - spacing - strokeWidth / 2 - d.y}\n      {r}\n    >\n      {#if getTitle}\n        <title>{getTitle(d)}</title>\n      {/if}\n    </circle>\n  {/each}\n</g>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Beeswarm"]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"The circle radius size in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"r","default":"3"},{"title":"param","description":"The circle's stroke width in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"strokeWidth","default":"0"},{"title":"param","description":"The circle's stroke color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"stroke","default":"'#fff'"},{"title":"param","description":"Whitespace padding between each circle, in pixels","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"spacing","default":"1.5"},{"title":"param","description":"— An accessor function to get the field on the data element to display as a hover label using a `<title>` tag.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Function"},{"type":"UndefinedLiteral"}]}},"name":"getTitle"}]},"componentDescription":"Generates an SVG Beeswarm chart.","modules":[]}