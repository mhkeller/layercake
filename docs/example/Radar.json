{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n\n  import Radar from './_components/Radar.svelte';\n  import AxisRadial from './_components/AxisRadial.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/radarScores.csv';\n\n  const seriesKey = 'name';\n  const xKey = ['fastball', 'change', 'slider', 'cutter', 'curve'];\n\n  const seriesNames = Object.keys(data[0]).filter(d => d !== seriesKey);\n\n  data.forEach(d => {\n    seriesNames.forEach(name => {\n      d[name] = +d[name];\n    });\n  });\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 30, right: 0, bottom: 7, left: 0 }}\n    x={xKey}\n    xDomain={[0, 10]}\n    xRange={({ height }) => [0, height / 2]}\n    {data}\n  >\n    <Svg>\n      <AxisRadial />\n      <Radar />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>"},"dek":"","components":[{"title":"./_components/Radar.svelte","contents":"<!--\n  @component\n  Generates an SVG radar chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { line, curveCardinalClosed } from 'd3-shape';\n\n  const { data, width, height, xGet, config } = getContext('LayerCake');\n\n  /**  @type {String} [fill='#f0c'] The radar's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let fill = '#f0c';\n\n  /**  @type {String} [stroke='#f0c'] The radar's stroke color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let stroke = '#f0c';\n\n  /**  @type {Number} [stroke=2] The radar's stroke color. */\n  export let strokeWidth = 2;\n\n  /**  @type {Number} [fillOpacity=0.5] The radar's fill opacity. */\n  export let fillOpacity = 0.5;\n\n  /**  @type {Number} [r=4.5] Each circle's radius. */\n  export let r = 4.5;\n\n  /**  @type {String} [circleFill=\"#f0c\"] Each circle's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let circleFill = '#f0c';\n\n  /**  @type {String} [circleStroke=\"#fff\"] Each circle's stroke color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let circleStroke = '#fff';\n\n  /**  @type {Number} [circleStrokeWidth=1] Each circle's stroke width. */\n  export let circleStrokeWidth = 1;\n\n  $: angleSlice = (Math.PI * 2) / $config.x.length;\n\n  $: path = line()\n    .curve(curveCardinalClosed)\n    .x((d, i) => d * Math.cos(angleSlice * i - Math.PI / 2))\n    .y((d, i) => d * Math.sin(angleSlice * i - Math.PI / 2));\n\n  /* The non-D3 line generator way. */\n  // $: path = valus => 'M' + values\n  //   .map(d => {\n  //     return $rGet(d).map((val, i) => {\n  //       return [\n  //         val * Math.cos(angleSlice * i - Math.PI / 2),\n  //         val * Math.sin(angleSlice * i - Math.PI / 2)\n  //       ].join(',');\n  //     });\n  //   })\n  //   .join('L') + 'z';\n</script>\n\n<g transform=\"translate({$width / 2}, {$height / 2})\">\n  {#each $data as row}\n    {@const xVals = $xGet(row)}\n    <!-- Draw a line connecting all the dots -->\n    <path\n      class=\"path-line\"\n      d={path(xVals)}\n      {stroke}\n      stroke-width={strokeWidth}\n      {fill}\n      fill-opacity={fillOpacity}\n    ></path>\n\n    <!-- Plot each dots -->\n    {#each xVals as circleR, i}\n      {@const thisAngleSlice = angleSlice * i - Math.PI / 2}\n      <circle\n        cx={circleR * Math.cos(thisAngleSlice)}\n        cy={circleR * Math.sin(thisAngleSlice)}\n        {r}\n        fill={circleFill}\n        stroke={circleStroke}\n        stroke-width={circleStrokeWidth}\n      ></circle>\n    {/each}\n  {/each}\n</g>\n\n<style>\n  .path-line {\n    stroke-linejoin: round;\n    stroke-linecap: round;\n  }\n</style>"},{"title":"./_components/AxisRadial.svelte","contents":"<!--\n  @component\n  Generates an SVG radial scale, useful for radar charts.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, extents, config } = getContext('LayerCake');\n\n  /** @type {Number} [lineLengthFactor=1.1] - How far to extend the lines from the circle's center. A value of `1` puts them at the circle's circumference. */\n  export let lineLengthFactor = 1.1;\n\n  /** @type {Number} [labelPlacementFactor=1.25] - How far to place the labels from the circle's center. A value of `1` puts them at the circle's circumference. */\n  export let labelPlacementFactor = 1.25;\n\n  $: max = $xScale(Math.max(...$extents.x));\n\n  $: lineLength = max * lineLengthFactor;\n  $: labelPlacement = max * labelPlacementFactor;\n\n  $: angleSlice = (Math.PI * 2) / $config.x.length;\n\n  function anchor(total, i) {\n    if (i === 0 || i === total / 2) {\n      return 'middle';\n    } else if (i < total / 2) {\n      return 'start';\n    }\n    return 'end';\n  }\n</script>\n\n<g transform=\"translate({$width / 2}, {$height / 2})\">\n  <circle cx=\"0\" cy=\"0\" r={max} stroke=\"#ccc\" stroke-width=\"1\" fill=\"#CDCDCD\" fill-opacity=\"0.1\"\n  ></circle>\n  <circle cx=\"0\" cy=\"0\" r={max / 2} stroke=\"#ccc\" stroke-width=\"1\" fill=\"none\"></circle>\n\n  {#each $config.x as label, i}\n    {@const thisAngleSlice = angleSlice * i - Math.PI / 2}\n    <line\n      x1=\"0\"\n      y1=\"0\"\n      x2={lineLength * Math.cos(thisAngleSlice)}\n      y2={lineLength * Math.sin(thisAngleSlice)}\n      stroke=\"#ccc\"\n      stroke-width=\"1\"\n      fill=\"none\"\n    >\n    </line>\n    <text\n      text-anchor={anchor($config.x.length, i)}\n      dy=\"0.35em\"\n      font-size=\"12px\"\n      transform=\"translate({labelPlacement * Math.cos(thisAngleSlice)}, {labelPlacement *\n        Math.sin(thisAngleSlice)})\">{label}</text\n    >\n  {/each}\n</g>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/radarScores.csv","contents":"name,fastball,change,slider,cutter,curve\nAllison,10,0,4,8,5"}],"jsons":[]}