{"main":{"slug":"AxisX.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML x-axis, useful for server-side rendered charts. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xScale, percentRange } = getContext('LayerCake');\n\n  /** @type {boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {boolean} [baseline=false] - Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {(d: any) => string} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {number|Array<any>|Function|undefined} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {string} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: tickLen = tickMarks === true ? (tickMarkLength ?? 6) : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  /** @type {Array<any>} */\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<div class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $xScale(tick)}\n\n    {#if baseline === true}\n      <div class=\"baseline\" style=\"top:100%; width:100%;\"></div>\n    {/if}\n\n    {#if gridlines === true}\n      <div class=\"gridline\" style:left=\"{tickValUnits}{units}\" style=\"top:0; bottom:0;\"></div>\n    {/if}\n    {#if tickMarks === true}\n      <div\n        class=\"tick-mark\"\n        style:left=\"{tickValUnits + halfBand}{units}\"\n        style:height=\"{tickLen}px\"\n        style:bottom=\"{-tickLen - tickGutter}px\"\n      ></div>\n    {/if}\n    <div\n      class=\"tick tick-{i}\"\n      style:left=\"{tickValUnits + halfBand}{units}\"\n      style=\"top:calc(100% + {tickGutter}px);\"\n    >\n      <div\n        class=\"text\"\n        style:top=\"{tickLen}px\"\n        style:transform=\"translate(calc(-50% + {dx}px), {dy}px)\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .tick-mark {\n    border-left: 1px solid #aaa;\n  }\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  /* This looks a little better at 40 percent than 50 */\n  .axis.snapLabels .tick:last-child {\n    transform: translateX(-40%);\n  }\n  .axis.snapLabels .tick.tick-0 {\n    transform: translateX(40%);\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":["/example-ssr/AreaStacked","/example-ssr/Bar","/example-ssr/BarStacked","/example-ssr/Brush","/example-ssr/ClevelandDotPlot","/example-ssr/Column","/example-ssr/ColumnStacked","/example-ssr/Histogram","/example-ssr/Line","/example-ssr/MultiLine","/example-ssr/Scatter","/example-ssr/ScatterWebgl","/example-ssr/Timeplot"]}],"hasjsDoctable":true,"jsdocParsed":[{"kind":"type","type":"boolean","name":"tickMarks","required":false,"defaultValue":"false","description":"Show a vertical mark for each tick."},{"kind":"type","type":"boolean","name":"gridlines","required":false,"defaultValue":"true","description":"Show gridlines extending into the chart area."},{"kind":"type","type":"number","name":"tickMarkLength","required":false,"defaultValue":"6","description":"The length of the tick mark."},{"kind":"type","type":"boolean","name":"baseline","required":false,"defaultValue":"false","description":"Show a solid line at the bottom."},{"kind":"type","type":"boolean","name":"snapLabels","required":false,"defaultValue":"false","description":"Instead of centering the text labels on the first and the last items, align them to the edges of the chart."},{"kind":"type","type":"(d: any) => string","name":"format","required":false,"defaultValue":"d => d","description":"A function that passes the current tick value and expects a nicely formatted value in return."},{"kind":"type","type":"number|Array<any>|Function|undefined","name":"ticks","required":false,"defaultValue":null,"description":"If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function."},{"kind":"type","type":"number","name":"tickGutter","required":false,"defaultValue":"0","description":"The amount of whitespace between the start of the tick and the chart drawing area (the yRange min)."},{"kind":"type","type":"number","name":"dx","required":false,"defaultValue":"0","description":"Any optional value passed to the `dx` attribute on the text label."},{"kind":"type","type":"number","name":"dy","required":false,"defaultValue":"0","description":"Any optional value passed to the `dy` attribute on the text label."},{"kind":"type","type":"string","name":"units","required":true,"defaultValue":null,"description":"Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`."}],"componentDescription":"\n  Generates an HTML x-axis, useful for server-side rendered charts. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n \n","modules":[]}