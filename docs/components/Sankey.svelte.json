{"main":{"slug":"Sankey.svelte","contents":"<!--\n  @component\n  Generates an SVG Sankey chart using [d3-sankey](https://github.com/d3/d3-sankey).\n -->\n<script>\n  import { getContext } from 'svelte';\n  import * as Sankey from 'd3-sankey';\n\n  const { data, width, height } = getContext('LayerCake');\n\n  /** @type {Function} [colorLinks=d => 'rgba(0, 0, 0, .2)'] - A function to return a color for the links. */\n  export let colorLinks = () => 'rgba(0, 0, 0, .2)';\n\n  /** @type {Function} [colorNodes=d => '#333'] - A function to return a color for each node. */\n  export let colorNodes = () => '#333';\n\n  /** @type {Function} [colorText=d => '#263238'] - A function to return a color for each text label. */\n  export let colorText = () => '#263238';\n\n  /** @type {Number} [nodeWidth=5] - The width of each node, in pixels, passed to [`sankey.nodeWidth`](https://github.com/d3/d3-sankey#sankey_nodeWidth). */\n  export let nodeWidth = 5;\n\n  /** @type {Number} [nodePadding=10] - The padding between nodes, passed to [`sankey.nodePadding`](https://github.com/d3/d3-sankey#sankey_nodePadding). */\n  export let nodePadding = 10;\n\n  /** @type {Function|null} [linkSort=null] - How to sort the links, passed to [`sankey.linkSort`](https://github.com/d3/d3-sankey#sankey_linkSort). */\n  export let linkSort = null;\n\n  /** @type {Function} [nodeId=d => d.id] - The ID field accessor, passed to [`sankey.nodeId`](https://github.com/d3/d3-sankey#sankey_nodeId). */\n  export let nodeId = d => d.id;\n\n  /** @type {Function} [nodeAlign=d3.sankeyLeft] - An alignment function to position the Sankey blocks. See the [d3-sankey documentation](https://github.com/d3/d3-sankey#alignments) for more. */\n  export let nodeAlign = Sankey.sankeyLeft;\n\n  const link = Sankey.sankeyLinkHorizontal();\n\n  $: sankey = Sankey.sankey()\n    .nodeAlign(nodeAlign)\n    .nodeWidth(nodeWidth)\n    .nodePadding(nodePadding)\n    .nodeId(nodeId)\n    .size([$width, $height])\n    .linkSort(linkSort);\n\n  $: sankeyData = sankey($data);\n\n  $: fontSize = $width <= 320 ? 8 : 12;\n</script>\n\n<g class=\"sankey-layer\">\n  <g class=\"link-group\">\n    {#each sankeyData.links as d}\n      <path\n        d={link(d)}\n        fill=\"none\"\n        stroke={colorLinks(d)}\n        stroke-opacity=\"0.5\"\n        stroke-width={d.width}\n      />\n    {/each}\n  </g>\n  <g class=\"rect-group\">\n    {#each sankeyData.nodes as d}\n      <rect x={d.x0} y={d.y0} height={d.y1 - d.y0} width={d.x1 - d.x0} fill={colorNodes(d)} />\n      <text\n        x={d.x0 < $width / 4 ? d.x1 + 6 : d.x0 - 6}\n        y={(d.y1 + d.y0) / 2}\n        dy={fontSize / 2 - 2}\n        style=\"fill: {colorText(d)};\n              font-size: {fontSize}px;\n              text-anchor: {d.x0 < $width / 4 ? 'start' : 'end'};\"\n      >\n        {d.id}\n      </text>\n    {/each}\n  </g>\n</g>\n\n<style>\n  text {\n    pointer-events: none;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Sankey"]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"A function to return a color for the links.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"colorLinks","default":"d=>'rgba(0, 0, 0, .2)'"},{"title":"param","description":"A function to return a color for each node.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"colorNodes","default":"d=>'#333'"},{"title":"param","description":"A function to return a color for each text label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"colorText","default":"d=>'#263238'"},{"title":"param","description":"The width of each node, in pixels, passed to [`sankey.nodeWidth`](https://github.com/d3/d3-sankey#sankey_nodeWidth).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"nodeWidth","default":"5"},{"title":"param","description":"The padding between nodes, passed to [`sankey.nodePadding`](https://github.com/d3/d3-sankey#sankey_nodePadding).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"nodePadding","default":"10"},{"title":"param","description":"How to sort the links, passed to [`sankey.linkSort`](https://github.com/d3/d3-sankey#sankey_linkSort).","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Function"},{"type":"NullLiteral"}]}},"name":"linkSort","default":"null"},{"title":"param","description":"The ID field accessor, passed to [`sankey.nodeId`](https://github.com/d3/d3-sankey#sankey_nodeId).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"nodeId","default":"d=>d.id"},{"title":"param","description":"An alignment function to position the Sankey blocks. See the [d3-sankey documentation](https://github.com/d3/d3-sankey#alignments) for more.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"nodeAlign","default":"d3.sankeyLeft"}]},"componentDescription":"Generates an SVG Sankey chart using [d3-sankey](https://github.com/d3/d3-sankey).","modules":[]}