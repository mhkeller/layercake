{"main":{"slug":"AxisXTop.svelte","contents":"<!--\n  @component\n  Generates an SVG top x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] – Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=-4] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = -4;\n\n  function textAnchor(i, sl) {\n    if (sl === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<g class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {#if baseline === true}\n      <line class=\"baseline\" y1=\"0\" y2=\"0\" x1=\"0\" x2={$width} />\n    {/if}\n\n    <g class=\"tick tick-{i}\" transform=\"translate({$xScale(tick)},{Math.min(...$yRange)})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" x1=\"0\" x2=\"0\" y1={$height} y2=\"0\" />\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          x1={halfBand}\n          x2={halfBand}\n          y1={-tickGutter}\n          y2={-tickLen - tickGutter}\n        />\n      {/if}\n      <text x={halfBand} y={-tickGutter - tickLen} {dx} {dy} text-anchor={textAnchor(i, snapLabels)}\n        >{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapLabels .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapLabels .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"Show a vertical mark for each tick.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"tickMarks","default":"false"},{"title":"param","description":"Show gridlines extending into the chart area.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"gridlines","default":"true"},{"title":"param","description":"The length of the tick mark.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"tickMarkLength","default":"6"},{"title":"param","description":"– Show a solid line at the bottom.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"baseline","default":"false"},{"title":"param","description":"Instead of centering the text labels on the first and the last items, align them to the edges of the chart.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"snapLabels","default":"false"},{"title":"param","description":"A function that passes the current tick value and expects a nicely formatted value in return.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"format","default":"d=>d"},{"title":"param","description":"If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Number"},{"type":"NameExpression","name":"Array"},{"type":"NameExpression","name":"Function"}]}},"name":"ticks"},{"title":"param","description":"The amount of whitespace between the start of the tick and the chart drawing area (the xRange min).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"tickGutter","default":"0"},{"title":"param","description":"Any optional value passed to the `dx` attribute on the text label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dx","default":"0"},{"title":"param","description":"Any optional value passed to the `dy` attribute on the text label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dy","default":"-4"}]},"componentDescription":"Generates an SVG top x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.","modules":[]}