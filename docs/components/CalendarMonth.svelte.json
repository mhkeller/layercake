{"main":{"slug":"CalendarMonth.svelte","contents":"<!--\n  @component\n  Generates an SVG calendar chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { timeFormat } from 'd3-time-format';\n  import { timeDay } from 'd3-time';\n\n  const { width, height, data, x, z, zScale, extents } = getContext('LayerCake');\n\n  /** @type {Function} [calcCellSize=(w, h) => Math.min(w / 7, h / 5)] - A function givn the canvas width and height as arguments and expects a return number that will be used as the width and height for each cell. The default will choose a size that fits seven cells across and five rows top to bottom. */\n  export let calcCellSize = (w, h) => Math.min(w / 7, h / 5);\n\n  const getDayOfWeek = timeFormat('%w');\n  const getWeekOfYear = timeFormat('%U');\n\n  $: count = date => {\n    const stringDate = date.toISOString().split('T')[0];\n    const days = $data.filter(d => $x(d) === stringDate)[0];\n    if (days) {\n      return $z(days);\n    }\n    return 0;\n  };\n\n  $: fillColor = day => {\n    const n = count(day);\n    return n ? $zScale(n) : '#fff';\n  };\n\n  $: cellSize = calcCellSize($width, $height);\n\n  let days;\n\n  /* --------------------------------------------\n   * Calculate what month we're in and generate the full days of that month\n   */\n  $: {\n    const minDate = $extents.x[0];\n    const parts = minDate.split('-').map(d => +d);\n\n    days = timeDay.range(\n      new Date(Date.UTC(parts[0], parts[1] - 1, 1)),\n      new Date(Date.UTC(parts[0], parts[1], 1))\n    );\n  }\n\n  $: rectX = day => getDayOfWeek(day) * cellSize;\n  $: rectY = day => {\n    const startWeek = getWeekOfYear(new Date(day.getUTCFullYear(), day.getUTCMonth(), 1));\n    const thisWeek = getWeekOfYear(day);\n    const weekDiff = thisWeek - startWeek;\n    return weekDiff * cellSize;\n  };\n\n  function showCount(day) {\n    console.log(day, count(day));\n  }\n</script>\n\n{#each days as day}\n  <rect\n    class=\"day\"\n    width={cellSize}\n    height={cellSize}\n    x={rectX(day)}\n    y={rectY(day)}\n    style=\"fill:{fillColor(day)};\"\n    on:mouseenter={showCount(day)}\n    role=\"tooltip\"\n  />\n{/each}\n\n<style>\n  .day {\n    stroke: #000;\n    stroke-width: 1;\n    fill: #fff;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Calendar"]},{"group":"SSR","matches":["/example-ssr/Calendar"]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"A function givn the canvas width and height as arguments and expects a return number that will be used as the width and height for each cell. The default will choose a size that fits seven cells across and five rows top to bottom.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"calcCellSize","default":"(w,h)=>Math.min(w/7,h/5)"}]},"componentDescription":"Generates an SVG calendar chart.","modules":[]}