{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n\n  import Sankey from './_components/Sankey.svelte';\n\n  import data from './_data/sankey-data.js';\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake {data}>\n    <Svg>\n      <Sankey colorNodes={d => '#00bbff'} colorLinks={d => '#00bbff35'} />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>"},"dek":"","components":[{"title":"./_components/Sankey.svelte","contents":"<!--\n  @component\n  Generates an SVG Sankey chart using [d3-sankey](https://github.com/d3/d3-sankey).\n -->\n<script>\n  import { getContext } from 'svelte';\n  import * as Sankey from 'd3-sankey';\n\n  const { data, width, height } = getContext('LayerCake');\n\n  /** @type {Function} [colorLinks=d => 'rgba(0, 0, 0, .2)'] - A function to return a color for the links. */\n  export let colorLinks = () => 'rgba(0, 0, 0, .2)';\n\n  /** @type {Function} [colorNodes=d => '#333'] - A function to return a color for each node. */\n  export let colorNodes = () => '#333';\n\n  /** @type {Function} [colorText=d => '#263238'] - A function to return a color for each text label. */\n  export let colorText = () => '#263238';\n\n  /** @type {Number} [nodeWidth=5] - The width of each node, in pixels, passed to [`sankey.nodeWidth`](https://github.com/d3/d3-sankey#sankey_nodeWidth). */\n  export let nodeWidth = 5;\n\n  /** @type {Number} [nodePadding=10] - The padding between nodes, passed to [`sankey.nodePadding`](https://github.com/d3/d3-sankey#sankey_nodePadding). */\n  export let nodePadding = 10;\n\n  /** @type {Function|null} [linkSort=null] - How to sort the links, passed to [`sankey.linkSort`](https://github.com/d3/d3-sankey#sankey_linkSort). */\n  export let linkSort = null;\n\n  /** @type {Function} [nodeId=d => d.id] - The ID field accessor, passed to [`sankey.nodeId`](https://github.com/d3/d3-sankey#sankey_nodeId). */\n  export let nodeId = d => d.id;\n\n  /** @type {Function} [nodeAlign=d3.sankeyLeft] - An alignment function to position the Sankey blocks. See the [d3-sankey documentation](https://github.com/d3/d3-sankey#alignments) for more. */\n  export let nodeAlign = Sankey.sankeyLeft;\n\n  const link = Sankey.sankeyLinkHorizontal();\n\n  $: sankey = Sankey.sankey()\n    .nodeAlign(nodeAlign)\n    .nodeWidth(nodeWidth)\n    .nodePadding(nodePadding)\n    .nodeId(nodeId)\n    .size([$width, $height])\n    .linkSort(linkSort);\n\n  $: sankeyData = sankey($data);\n\n  $: fontSize = $width <= 320 ? 8 : 12;\n</script>\n\n<g class=\"sankey-layer\">\n  <g class=\"link-group\">\n    {#each sankeyData.links as d}\n      <path\n        d={link(d)}\n        fill=\"none\"\n        stroke={colorLinks(d)}\n        stroke-opacity=\"0.5\"\n        stroke-width={d.width}\n      />\n    {/each}\n  </g>\n  <g class=\"rect-group\">\n    {#each sankeyData.nodes as d}\n      <rect x={d.x0} y={d.y0} height={d.y1 - d.y0} width={d.x1 - d.x0} fill={colorNodes(d)} />\n      <text\n        x={d.x0 < $width / 4 ? d.x1 + 6 : d.x0 - 6}\n        y={(d.y1 + d.y0) / 2}\n        dy={fontSize / 2 - 2}\n        style=\"fill: {colorText(d)};\n              font-size: {fontSize}px;\n              text-anchor: {d.x0 < $width / 4 ? 'start' : 'end'};\"\n      >\n        {d.id}\n      </text>\n    {/each}\n  </g>\n</g>\n\n<style>\n  text {\n    pointer-events: none;\n  }\n</style>"}],"modules":[{"title":"./_data/sankey-data.js","contents":"export default {\n  nodes: [\n    { id: 'A1' },\n    { id: 'A2' },\n    { id: 'A3' },\n    { id: 'B1' },\n    { id: 'B2' },\n    { id: 'B3' },\n    { id: 'B4' },\n    { id: 'C1' },\n    { id: 'C2' },\n    { id: 'C3' },\n    { id: 'D1' },\n    { id: 'D2' }\n  ],\n  links: [\n    { source: 'A1', target: 'B1', value: 27 },\n    { source: 'A1', target: 'B2', value: 9 },\n    { source: 'A2', target: 'B2', value: 5 },\n    { source: 'A2', target: 'B3', value: 11 },\n    { source: 'A3', target: 'B2', value: 12 },\n    { source: 'A3', target: 'B4', value: 7 },\n    { source: 'B1', target: 'C1', value: 13 },\n    { source: 'B1', target: 'C2', value: 10 },\n    { source: 'B4', target: 'C2', value: 5 },\n    { source: 'B4', target: 'C3', value: 2 },\n    { source: 'B1', target: 'D1', value: 4 },\n    { source: 'C3', target: 'D1', value: 1 },\n    { source: 'C3', target: 'D2', value: 1 }\n  ]\n};"}],"componentModules":[],"componentComponents":[],"csvs":[],"jsons":[]}