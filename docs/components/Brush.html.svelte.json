{"main":{"slug":"Brush.html.svelte","contents":"<!--\n  @component\n  Adds a brush component to create a range between 0 and 1. Bind to the `min` and `max` props to use them in other components. See the [brushable example](https://layercake.graphcics/example/Brush) for use.\n -->\n<script>\n  import { clamp } from 'yootils';\n\n  /** @type {Number} min - The brush's min value. Useful to bind to. */\n  export let min;\n\n  /** @type {Number} max - The brush's max value. Useful to bind to. */\n  export let max;\n\n  let brush;\n\n  const p = x => {\n    const { left, right } = brush.getBoundingClientRect();\n    return clamp((x - left) / (right - left), 0, 1);\n  };\n\n  const handler = fn => {\n    return e => {\n      if (e.type === 'touchstart') {\n        if (e.touches.length !== 1) return;\n        e = e.touches[0];\n      }\n\n      const id = e.identifier;\n      const start = { min, max, p: p(e.clientX) };\n\n      const handle_move = e => {\n        if (e.type === 'touchmove') {\n          if (e.changedTouches.length !== 1) return;\n          e = e.changedTouches[0];\n          if (e.identifier !== id) return;\n        }\n\n        fn(start, p(e.clientX));\n      };\n\n      const handle_end = e => {\n        if (e.type === 'touchend') {\n          if (e.changedTouches.length !== 1) return;\n          if (e.changedTouches[0].identifier !== id) return;\n        } else if (e.target === brush) {\n          clear();\n        }\n\n        window.removeEventListener('mousemove', handle_move);\n        window.removeEventListener('mouseup', handle_end);\n\n        window.removeEventListener('touchmove', handle_move);\n        window.removeEventListener('touchend', handle_end);\n      };\n\n      window.addEventListener('mousemove', handle_move);\n      window.addEventListener('mouseup', handle_end);\n\n      window.addEventListener('touchmove', handle_move);\n      window.addEventListener('touchend', handle_end);\n    };\n  };\n\n  const clear = () => {\n    min = null;\n    max = null;\n  };\n\n  const reset = handler((start, p) => {\n    min = clamp(Math.min(start.p, p), 0, 1);\n    max = clamp(Math.max(start.p, p), 0, 1);\n  });\n\n  const move = handler((start, p) => {\n    const d = clamp(p - start.p, -start.min, 1 - start.max);\n    min = start.min + d;\n    max = start.max + d;\n  });\n\n  const adjust_min = handler((start, p) => {\n    min = p > start.max ? start.max : p;\n    max = p > start.max ? p : start.max;\n  });\n\n  const adjust_max = handler((start, p) => {\n    min = p < start.min ? p : start.min;\n    max = p < start.min ? start.min : p;\n  });\n\n  $: left = 100 * min;\n  $: right = 100 * (1 - max);\n</script>\n\n<div\n  bind:this={brush}\n  class=\"brush-outer\"\n  on:mousedown|stopPropagation={reset}\n  on:touchstart|stopPropagation={reset}\n  role=\"slider\"\n  aria-valuemin={min}\n  aria-valuemax={max}\n  aria-valuetext=\"{min} to {max}\"\n  tabindex=\"0\"\n>\n  {#if min !== null}\n    <div\n      class=\"brush-inner\"\n      on:mousedown|stopPropagation={move}\n      on:touchstart|stopPropagation={move}\n      style=\"left: {left}%; right: {right}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n    <div\n      class=\"brush-handle\"\n      on:mousedown|stopPropagation={adjust_min}\n      on:touchstart|stopPropagation={adjust_min}\n      style=\"left: {left}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n    <div\n      class=\"brush-handle\"\n      on:mousedown|stopPropagation={adjust_max}\n      on:touchstart|stopPropagation={adjust_max}\n      style=\"right: {right}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n  {/if}\n</div>\n\n<style>\n  .brush-outer {\n    position: relative;\n    width: 100%;\n    height: calc(100% + 5px);\n    top: -5px;\n  }\n\n  .brush-inner {\n    position: absolute;\n    height: 100%;\n    cursor: move;\n    /* mix-blend-mode: difference; */\n    background-color: #cccccc90;\n    /* border: 1px solid #000; */\n  }\n\n  .brush-handle {\n    position: absolute;\n    width: 0;\n    height: 100%;\n    cursor: ew-resize;\n  }\n\n  .brush-handle::before {\n    position: absolute;\n    content: '';\n    width: 8px;\n    left: -4px;\n    height: 100%;\n    background: transparent;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Brush"]},{"group":"SSR","matches":["/example-ssr/Brush"]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"The brush's min value. Useful to bind to.","type":{"type":"NameExpression","name":"Number"},"name":"min"},{"title":"param","description":"The brush's max value. Useful to bind to.","type":{"type":"NameExpression","name":"Number"},"name":"max"}]},"componentDescription":"Adds a brush component to create a range between 0 and 1. Bind to the `min` and `max` props to use them in other components. See the [brushable example](https://layercake.graphcics/example/Brush) for use.","modules":[]}