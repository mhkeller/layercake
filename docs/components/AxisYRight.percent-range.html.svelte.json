{"main":{"slug":"AxisYRight.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML y-axis on the right-hand side. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, width, percentRange } = getContext('LayerCake');\n\n  /** @type {boolean} [tickMarks=true] - Show marks next to the tick label. */\n  export let tickMarks = true;\n\n  /** @type {string} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {boolean} [gridlines=true] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let gridlines = true;\n\n  /** @type {number|undefined} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {(d: any) => string} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {number|Array<any>|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {number} [tickGutter=5] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 5;\n\n  /** @type {number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {number} [dy=-3] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = -3;\n\n  /** @type {number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  /** @type {string} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  /** @type {Array<any>} */\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  /** @param {number} sum\n   *  @param {String} val */\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? (tickMarkLength ?? widestTickLen)\n        : (tickMarkLength ?? 6)\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: halfBand = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValUnits = Math.max(...tickVals.map($yScale));\n</script>\n\n<div class=\"axis y-axis\">\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $yScale(tick)}\n\n    <div\n      class=\"tick tick-{i}\"\n      style=\"left:{$xRange[0]}{units};top:{tickValUnits + halfBand}{units};\"\n    >\n      {#if gridlines === true}\n        <div\n          class=\"gridline\"\n          style=\"0\"\n          style:left=\"0px\"\n          style:right=\"{(labelPosition === 'above' ? -widestTickLen : -tickLen) - tickGutter}px\"\n        ></div>\n      {/if}\n      {#if tickMarks === true}\n        <div\n          class=\"tick-mark\"\n          style:top=\"0\"\n          style:left=\"{$width + tickGutter}px\"\n          style:width=\"{tickLen}px\"\n        ></div>\n      {/if}\n      <div\n        class=\"text\"\n        style:top=\"0\"\n        style:left=\"calc(100% + {tickGutter + (labelPosition === 'even' ? tickLen : 0)}px)\"\n        style:transform=\"translate({dx + (labelPosition === 'even' ? 3 : 0)}px, calc(-50% + {dy +\n          (labelPosition === 'above' ||\n          (snapBaselineLabel === true && tickValUnits === maxTickValUnits)\n            ? -3\n            : 4)}px))\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n    width: 100%;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":[{"kind":"type","type":"boolean","name":"tickMarks","required":false,"defaultValue":"true","description":"Show marks next to the tick label."},{"kind":"type","type":"string","name":"labelPosition","required":false,"defaultValue":"'even'","description":"Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'."},{"kind":"type","type":"boolean","name":"snapBaselineLabel","required":false,"defaultValue":"false","description":"When labelPosition='even', adjust the lowest label so that it sits above the tick mark."},{"kind":"type","type":"boolean","name":"gridlines","required":false,"defaultValue":"true","description":"When labelPosition='even', adjust the lowest label so that it sits above the tick mark."},{"kind":"type","type":"number|undefined","name":"tickMarkLength","required":false,"defaultValue":"undefined","description":"The length of the tick mark. If not set, becomes the length of the widest tick."},{"kind":"type","type":"(d: any) => string","name":"format","required":false,"defaultValue":"d => d","description":"A function that passes the current tick value and expects a nicely formatted value in return."},{"kind":"type","type":"number|Array<any>|Function","name":"ticks","required":false,"defaultValue":"4","description":"If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return."},{"kind":"type","type":"number","name":"tickGutter","required":false,"defaultValue":"5","description":"The amount of whitespace between the start of the tick and the chart drawing area (the xRange min)."},{"kind":"type","type":"number","name":"dx","required":false,"defaultValue":"0","description":"Any optional value passed to the `dx` attribute on the text label."},{"kind":"type","type":"number","name":"dy","required":false,"defaultValue":"-3","description":"Any optional value passed to the `dy` attribute on the text label."},{"kind":"type","type":"number","name":"charPixelWidth","required":false,"defaultValue":"7.25","description":"Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value)."},{"kind":"type","type":"string","name":"units","required":true,"defaultValue":null,"description":"Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`."}],"componentDescription":"\n  Generates an HTML y-axis on the right-hand side. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n \n","modules":[]}