{"main":{"slug":"Map.canvas.svelte","contents":"<!--\n  @component\n  Generates a canvas map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { scaleCanvas } from 'layercake';\n  import { geoPath } from 'd3-geo';\n\n  const { data, width, height, zGet } = getContext('LayerCake');\n\n  const { ctx } = getContext('canvas');\n\n  /** @type {Function} projection - A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`. */\n  export let projection;\n\n  /** @type {String} [stroke='#ccc'] - The shape's stroke color. */\n  export let stroke = '#ccc';\n\n  /** @type {Number} [strokeWidth=1] - The shape's stroke width. */\n  export let strokeWidth = 1;\n\n  /** @type {String|undefined} [fill] - The shape's fill color. By default, the fill will be determined by the z-scale, unless this prop is set. */\n  export let fill = undefined;\n\n  /** @type {Array|undefined} [features] - A list of GeoJSON features. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data.features` if left unset. */\n  export let features = undefined;\n\n  $: projectionFn = projection().fitSize([$width, $height], $data);\n\n  $: geoPathFn = geoPath(projectionFn);\n\n  $: featuresToDraw = features || $data.features;\n\n  $: {\n    if ($ctx && geoPath) {\n      scaleCanvas($ctx, $width, $height);\n      $ctx.clearRect(0, 0, $width, $height);\n\n      featuresToDraw.forEach(feature => {\n        $ctx.beginPath();\n        // Set the context here since setting it in `$: geoPath` is a circular reference\n        geoPathFn.context($ctx);\n        geoPathFn(feature);\n\n        $ctx.fillStyle = fill || $zGet(feature.properties);\n        $ctx.fill();\n\n        $ctx.lineWidth = strokeWidth;\n        $ctx.strokeStyle = stroke;\n        $ctx.stroke();\n      });\n    }\n  }\n</script>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/MapLayered"]},{"group":"SSR","matches":["/example-ssr/MapLayered"]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.","type":{"type":"NameExpression","name":"Function"},"name":"projection"},{"title":"param","description":"The shape's stroke color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"stroke","default":"'#ccc'"},{"title":"param","description":"The shape's stroke width.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"strokeWidth","default":"1"},{"title":"param","description":"The shape's fill color. By default, the fill will be determined by the z-scale, unless this prop is set.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"UndefinedLiteral"}]}},"name":"fill"},{"title":"param","description":"A list of GeoJSON features. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data.features` if left unset.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Array"},{"type":"UndefinedLiteral"}]}},"name":"features"}]},"componentDescription":"Generates a canvas map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).","modules":[]}