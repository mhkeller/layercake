{"main":{"slug":"Key.html.svelte","contents":"<!--\n  @component\n  Creates a key for ordinal scales on `zScale`.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  /** @type {String} [shape='square'] - The shape for each item. Can be 'circle', 'line', or 'square'; */\n  export let shape = 'square';\n\n  /** @type {String} [align='start'] - Sets the CSS flexbox justify-content setting for the box as a whole. Can be 'start', 'center' or 'end'. */\n  export let align = 'start';\n\n  /** @type {Function|Object|undefined} [lookup] - Either a function that takes the value and returns a formatted string, or an object of values. If a given value is not present in a lookup object, it returns the original value. */\n  export let lookup = undefined;\n\n  /** @type {Boolean} [capitalize=true] - Capitalize the first character. */\n  export let capitalize = true;\n\n  const { zDomain, zScale } = getContext('LayerCake');\n\n  function cap(val) {\n    return String(val).replace(/^\\w/, d => d.toUpperCase());\n  }\n\n  function displayName(val) {\n    if (lookup) {\n      return typeof lookup === 'function' ? lookup(val) : lookup[val] || val;\n    }\n    return capitalize === true ? cap(val) : val;\n  }\n</script>\n\n<div class=\"key\" style=\"justify-content: {align === 'end' ? 'flex-end' : align};\">\n  {#each $zDomain as item}\n    <div class=\"key-item\">\n      <div\n        class=\"chip chip__{shape}\"\n        style=\"background: {shape === `line`\n          ? `linear-gradient(-45deg, #ffffff 40%, ${$zScale(item)} 41%, ${$zScale(item)} 59%, #ffffff 60%)`\n          : $zScale(item)};\"\n      ></div>\n      <div class=\"name\">{displayName(item)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .key {\n    display: flex;\n  }\n  .key-item {\n    margin-right: 14px;\n  }\n  .chip {\n    display: inline-block;\n    position: relative;\n    width: 12px;\n    height: 12px;\n  }\n  .chip__circle {\n    border-radius: 50%;\n  }\n  .chip__line:after {\n    content: '';\n    position: absolute;\n    border-width: 3px;\n    width: 14px;\n    transform: rotate(-45deg);\n    transform-origin: 14px 5px;\n  }\n  .name {\n    display: inline;\n    font-size: 14px;\n    text-shadow:\n      -1px -1px 0 #fff,\n      1px -1px 0 #fff,\n      -1px 1px 0 #fff,\n      1px 1px 0 #fff;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Beeswarm","/example/BeeswarmForce"]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"The shape for each item. Can be 'circle', 'line', or 'square';","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"shape","default":"'square'"},{"title":"param","description":"Sets the CSS flexbox justify-content setting for the box as a whole. Can be 'start', 'center' or 'end'.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"align","default":"'start'"},{"title":"param","description":"Either a function that takes the value and returns a formatted string, or an object of values. If a given value is not present in a lookup object, it returns the original value.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Function"},{"type":"NameExpression","name":"Object"},{"type":"UndefinedLiteral"}]}},"name":"lookup"},{"title":"param","description":"Capitalize the first character.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"capitalize","default":"true"}]},"componentDescription":"Creates a key for ordinal scales on `zScale`.","modules":[]}