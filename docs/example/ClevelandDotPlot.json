{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import { scaleBand, scaleOrdinal } from 'd3-scale';\n\n  import ClevelandDotPlot from './_components/ClevelandDotPlot.svelte';\n  import AxisX from './_components/AxisX.svelte';\n  import AxisY from './_components/AxisY.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/fruitOrdinal.csv';\n\n  const yKey = 'year';\n  const xKey = Object.keys(data[0]).filter(d => d !== yKey);\n\n  const seriesColors = ['#f0c', '#00bbff', '#00e047', '#ff7a33'];\n\n  data.forEach(d => {\n    xKey.forEach(name => {\n      d[name] = +d[name];\n    });\n  });\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ right: 10, bottom: 20, left: 30 }}\n    x={xKey}\n    y={yKey}\n    yScale={scaleBand().paddingInner(0.05).round(true)}\n    xDomain={[0, null]}\n    xPadding={[10, 0]}\n    zScale={scaleOrdinal()}\n    zDomain={xKey}\n    zRange={seriesColors}\n    {data}\n  >\n    <Svg>\n      <AxisX />\n      <AxisY gridlines={false} />\n      <ClevelandDotPlot />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>"},"dek":"You could create this kind of plot by reshaping your data into rows of containing `name`, `value` and `group` and plot it like a scatter plot, but here's another way that doesn't require all that data manipulation and takes advantage of Layer Cake's accessor shorthand. In `main.js`, we simply specify the names of the keys in each row that we want to plot and in the layer component, we call `$xGet(row)` to map each object into an array of pixel values.\n","components":[{"title":"./_components/ClevelandDotPlot.svelte","contents":"<!--\n  @component\n  Generates an SVG Cleveland dot plot, also known as a lollipop-chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, yScale, zScale, config } = getContext('LayerCake');\n\n  /** @type {Number} [r=5] - The circle radius. */\n  export let r = 5;\n\n  $: midHeight = $yScale.bandwidth() / 2;\n</script>\n\n<g class=\"dot-plot\">\n  {#each $data as row}\n    {@const yVal = $yGet(row)}\n    {@const xVals = $xGet(row)}\n    <g class=\"dot-row\">\n      <line\n        x1={Math.min(...xVals)}\n        y1={yVal + midHeight}\n        x2={Math.max(...xVals)}\n        y2={yVal + midHeight}\n      ></line>\n\n      {#each xVals as circleX, i}\n        <circle cx={circleX} cy={yVal + midHeight} {r} fill={$zScale($config.x[i])}></circle>\n      {/each}\n    </g>\n  {/each}\n</g>\n\n<style>\n  line {\n    stroke-width: 1px;\n    stroke: #000;\n  }\n  circle {\n    stroke: #000;\n    stroke-width: 1px;\n  }\n</style>"},{"title":"./_components/AxisX.svelte","contents":"<!--\n  @component\n  Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=12] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 12;\n\n  function textAnchor(i, sl) {\n    if (sl === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<g class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {#if baseline === true}\n      <line class=\"baseline\" y1={$height} y2={$height} x1=\"0\" x2={$width} />\n    {/if}\n\n    <g class=\"tick tick-{i}\" transform=\"translate({$xScale(tick)},{Math.max(...$yRange)})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" x1={halfBand} x2={halfBand} y1={-$height} y2=\"0\" />\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          x1={halfBand}\n          x2={halfBand}\n          y1={tickGutter}\n          y2={tickGutter + tickLen}\n        />\n      {/if}\n      <text x={halfBand} y={tickGutter + tickLen} {dx} {dy} text-anchor={textAnchor(i, snapLabels)}\n        >{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapLabels .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapLabels .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./_components/AxisY.svelte","contents":"<!--\n  @component\n  Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, width } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: y = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValPx = Math.max(...tickVals.map($yScale));\n</script>\n\n<g class=\"axis y-axis\">\n  {#each tickVals as tick (tick)}\n    {@const tickValPx = $yScale(tick)}\n    <g class=\"tick tick-{tick}\" transform=\"translate({$xRange[0]}, {tickValPx})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" {x1} x2={$width} y1={y} y2={y}></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" {x1} x2={x1 + tickLen} y1={y} y2={y}></line>\n      {/if}\n      <text\n        x={x1}\n        {y}\n        dx={dx + (labelPosition === 'even' ? -3 : 0)}\n        text-anchor={labelPosition === 'above' ? 'start' : 'end'}\n        dy={dy +\n          (labelPosition === 'above' || (snapBaselineLabel === true && tickValPx === maxTickValPx)\n            ? -3\n            : 4)}>{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}],"jsons":[]}