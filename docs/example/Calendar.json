{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import { nest } from 'd3-collection';\n  import { scaleQuantize } from 'd3-scale';\n\n  import CalendarMonth from './_components/CalendarMonth.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import dates from './_data/dates.csv';\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n\n  const datesTransformed = dates.map(row => {\n    row.date = new Date(row.timestring);\n    return row;\n  });\n\n  const gutter = 10;\n  const seriesColors = ['#fff5cc', '#ffeba9', '#ffe182', '#ffd754', '#ffcc00'];\n\n  /* --------------------------------------------\n   * Group by month then by date\n   */\n  const byMonthByDate = nest()\n    .key(d => d.date.getUTCMonth())\n    .key(d => d.timestring.split('T')[0])\n    .entries(datesTransformed);\n\n  const sortedData = byMonthByDate.sort((a, b) => a.key - b.key);\n</script>\n\n{#each sortedData as month, i}\n  <div\n    class=\"chart-container\"\n    style=\"width:calc({100 / sortedData.length}% - {gutter}px);{i === 0\n      ? `margin-right:${gutter * 2}px`\n      : ''}\"\n    data-month={monthNames[+month.key + 1]}\n  >\n    <LayerCake\n      padding={{ top: 1, right: 1, bottom: 1, left: 1 }}\n      x=\"key\"\n      z={d => d.values.length}\n      zScale={scaleQuantize()}\n      zRange={seriesColors}\n      data={month.values}\n    >\n      <Svg>\n        <CalendarMonth />\n      </Svg>\n    </LayerCake>\n  </div>\n{/each}\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n    The width is being set inline below.\n  */\n  .chart-container {\n    --margin-top: 25px;\n    display: inline-block;\n    position: relative;\n    vertical-align: top;\n    height: calc(250px - var(--margin-top));\n    margin-top: var(--margin-top);\n  }\n  .chart-container:before {\n    content: attr(data-month);\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(0, -100%);\n  }\n</style>"},"dek":"Another small multiple example that generates the full date range for that month and puts each month inside its own div.\n","components":[{"title":"./_components/CalendarMonth.svelte","contents":"<!--\n  @component\n  Generates an SVG calendar chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { timeFormat } from 'd3-time-format';\n  import { timeDay } from 'd3-time';\n\n  const { width, height, data, x, z, zScale, extents } = getContext('LayerCake');\n\n  /** @type {Function} [calcCellSize=(w, h) => Math.min(w / 7, h / 5)] - A function givn the canvas width and height as arguments and expects a return number that will be used as the width and height for each cell. The default will choose a size that fits seven cells across and five rows top to bottom. */\n  export let calcCellSize = (w, h) => Math.min(w / 7, h / 5);\n\n  const getDayOfWeek = timeFormat('%w');\n  const getWeekOfYear = timeFormat('%U');\n\n  $: count = date => {\n    const stringDate = date.toISOString().split('T')[0];\n    const days = $data.filter(d => $x(d) === stringDate)[0];\n    if (days) {\n      return $z(days);\n    }\n    return 0;\n  };\n\n  $: fillColor = day => {\n    const n = count(day);\n    return n ? $zScale(n) : '#fff';\n  };\n\n  $: cellSize = calcCellSize($width, $height);\n\n  let days;\n\n  /* --------------------------------------------\n   * Calculate what month we're in and generate the full days of that month\n   */\n  $: {\n    const minDate = $extents.x[0];\n    const parts = minDate.split('-').map(d => +d);\n\n    days = timeDay.range(\n      new Date(Date.UTC(parts[0], parts[1] - 1, 1)),\n      new Date(Date.UTC(parts[0], parts[1], 1))\n    );\n  }\n\n  $: rectX = day => getDayOfWeek(day) * cellSize;\n  $: rectY = day => {\n    const startWeek = getWeekOfYear(new Date(day.getUTCFullYear(), day.getUTCMonth(), 1));\n    const thisWeek = getWeekOfYear(day);\n    const weekDiff = thisWeek - startWeek;\n    return weekDiff * cellSize;\n  };\n\n  function showCount(day) {\n    console.log(day, count(day));\n  }\n</script>\n\n{#each days as day}\n  <rect\n    class=\"day\"\n    width={cellSize}\n    height={cellSize}\n    x={rectX(day)}\n    y={rectY(day)}\n    style=\"fill:{fillColor(day)};\"\n    on:mouseenter={showCount(day)}\n    role=\"tooltip\"\n  />\n{/each}\n\n<style>\n  .day {\n    stroke: #000;\n    stroke-width: 1;\n    fill: #fff;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/dates.csv","contents":"timestring\n2018-07-22T22:25:55Z\n2018-07-22T19:35:29Z\n2018-07-22T18:54:42Z\n2018-07-22T02:05:59Z\n2018-07-21T00:55:02Z\n2018-07-21T00:53:00Z\n2018-07-20T23:32:37Z\n2018-07-20T17:52:55Z\n2018-07-20T17:52:01Z\n2018-07-20T17:32:21Z\n2018-07-20T16:38:22Z\n2018-07-20T16:38:20Z\n2018-07-19T21:07:28Z\n2018-07-19T01:36:47Z\n2018-07-19T01:00:04Z\n2018-07-18T20:15:35Z\n2018-07-18T03:05:05Z\n2018-07-18T02:56:18Z\n2018-07-18T02:11:53Z\n2018-07-18T02:08:49Z\n2018-07-18T02:02:14Z\n2018-07-17T04:13:29Z\n2018-07-16T03:24:58Z\n2018-07-16T03:23:55Z\n2018-07-16T03:22:02Z\n2018-07-15T18:37:05Z\n2018-07-15T01:34:48Z\n2018-07-15T01:11:38Z\n2018-07-15T01:02:25Z\n2018-07-14T23:32:07Z\n2018-07-14T18:26:04Z\n2018-07-14T18:25:35Z\n2018-07-14T02:56:28Z\n2018-07-13T16:33:57Z\n2018-07-13T15:52:16Z\n2018-07-12T20:31:12Z\n2018-07-12T20:27:11Z\n2018-07-12T14:17:18Z\n2018-07-12T03:49:28Z\n2018-07-12T03:42:33Z\n2018-07-12T03:20:45Z\n2018-07-12T01:47:25Z\n2018-07-12T01:26:16Z\n2018-07-12T01:16:55Z\n2018-07-12T00:50:15Z\n2018-07-11T19:16:21Z\n2018-07-11T02:38:15Z\n2018-07-11T01:03:55Z\n2018-07-11T01:00:55Z\n2018-07-11T00:59:31Z\n2018-07-10T19:06:36Z\n2018-07-10T19:03:18Z\n2018-07-10T01:05:50Z\n2018-07-09T23:43:32Z\n2018-07-09T17:39:53Z\n2018-07-09T17:37:15Z\n2018-07-09T15:50:12Z\n2018-07-09T03:47:16Z\n2018-07-09T03:06:21Z\n2018-07-09T02:59:34Z\n2018-07-08T20:53:53Z\n2018-07-07T01:37:58Z\n2018-07-07T01:32:23Z\n2018-07-07T01:30:09Z\n2018-07-06T17:03:39Z\n2018-07-06T16:00:39Z\n2018-07-06T15:59:44Z\n2018-07-04T22:29:55Z\n2018-07-03T02:59:41Z\n2018-07-03T02:58:36Z\n2018-07-03T02:56:41Z\n2018-07-01T02:21:56Z\n2018-07-01T02:20:27Z\n2018-07-01T02:15:25Z\n2018-04-29T02:22:38Z\n2018-04-29T02:19:25Z\n2018-04-28T22:48:50Z\n2018-04-28T06:52:20Z\n2018-04-28T06:45:09Z\n2018-04-26T21:18:11Z\n2018-04-26T17:35:37Z\n2018-04-26T01:52:56Z\n2018-04-26T01:07:36Z\n2018-04-26T01:05:37Z\n2018-04-26T01:05:27Z\n2018-04-26T01:00:30Z\n2018-04-25T22:06:56Z\n2018-04-25T21:32:42Z\n2018-04-24T22:48:43Z\n2018-04-24T22:48:26Z\n2018-04-24T21:59:53Z\n2018-04-24T21:58:36Z\n2018-04-24T05:21:33Z\n2018-04-21T03:36:45Z\n2018-04-21T03:25:06Z\n2018-04-20T17:57:25Z\n2018-04-20T17:29:16Z\n2018-04-20T17:24:44Z\n2018-04-20T15:53:26Z\n2018-04-20T15:32:59Z\n2018-04-18T17:33:38Z\n2018-04-18T15:28:30Z\n2018-04-18T15:16:40Z\n2018-04-18T15:07:48Z\n2018-04-18T13:56:38Z\n2018-04-18T04:46:00Z\n2018-04-18T04:45:33Z\n2018-04-18T02:19:48Z\n2018-04-18T01:28:23Z\n2018-04-17T23:11:52Z\n2018-04-17T23:11:52Z\n2018-04-17T23:05:10Z\n2018-04-17T21:15:49Z\n2018-04-17T21:15:41Z\n2018-04-16T04:20:34Z\n2018-04-16T04:20:15Z\n2018-04-16T04:19:46Z\n2018-04-16T04:18:59Z\n2018-04-16T04:14:41Z\n2018-04-16T03:54:01Z\n2018-04-16T03:53:10Z\n2018-04-15T02:28:02Z\n2018-04-14T17:41:43Z\n2018-04-14T04:42:10Z\n2018-04-14T04:40:23Z\n2018-04-14T04:40:10Z\n2018-04-14T01:31:38Z\n2018-04-14T00:23:02Z\n2018-04-13T18:17:10Z\n2018-04-13T18:08:21Z\n2018-04-13T15:29:46Z\n2018-04-13T15:15:33Z\n2018-04-13T04:54:39Z\n2018-04-13T04:27:48Z\n2018-04-13T04:24:37Z\n2018-04-13T04:08:45Z\n2018-04-13T03:53:50Z\n2018-04-13T03:42:23Z\n2018-04-12T19:03:27Z\n2018-04-11T00:32:39Z\n2018-04-11T00:32:32Z\n2018-04-09T02:57:20Z\n2018-04-09T02:54:40Z\n2018-04-08T04:28:23Z\n2018-04-08T02:19:41Z\n2018-04-08T00:50:51Z\n2018-04-08T00:40:52Z\n2018-04-07T21:54:06Z\n2018-04-07T21:53:09Z\n2018-04-07T19:09:30Z\n2018-04-07T18:55:04Z\n2018-04-07T18:51:44Z\n2018-04-07T17:24:28Z\n2018-04-07T02:31:18Z\n2018-04-05T04:20:20Z\n2018-04-05T04:19:13Z\n2018-04-05T04:16:31Z\n2018-04-05T04:09:51Z\n2018-04-05T04:05:10Z\n2018-04-05T04:04:29Z\n2018-04-05T04:02:12Z\n2018-04-05T03:59:43Z\n2018-04-05T03:47:58Z\n2018-04-05T03:43:55Z\n2018-04-05T03:29:56Z\n2018-04-05T03:16:56Z\n2018-04-05T02:21:36Z\n2018-04-05T01:31:23Z\n2018-04-05T01:30:41Z\n2018-04-04T02:47:42Z\n2018-04-04T02:45:33Z\n2018-04-04T02:45:05Z\n2018-04-03T23:56:11Z\n2018-04-03T23:55:17Z\n2018-04-03T23:54:47Z\n2018-04-03T23:54:37Z\n2018-04-03T23:32:11Z\n2018-04-03T05:21:21Z\n2018-04-03T05:21:09Z\n2018-04-03T05:19:31Z\n2018-04-03T05:08:45Z\n2018-04-03T05:00:12Z\n2018-04-03T04:56:14Z\n2018-04-03T04:55:39Z\n2018-04-03T02:51:39Z\n2018-04-03T02:02:43Z\n2018-04-03T02:02:36Z\n2018-04-03T02:01:59Z\n2018-04-03T02:01:27Z\n2018-04-03T00:32:13Z\n2018-04-03T00:31:16Z\n2018-04-03T00:29:42Z\n2018-04-03T00:27:39Z\n2018-04-02T03:33:34Z\n2018-04-02T01:14:13Z\n2018-04-02T01:09:56Z\n2018-04-02T00:59:54Z\n2018-04-01T05:22:24Z\n2018-04-01T04:30:49Z\n2018-04-01T04:30:25Z"}],"jsons":[]}