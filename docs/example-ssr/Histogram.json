{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, ScaledSvg, Html, takeEvery } from 'layercake';\n  import { extent, bin } from 'd3-array';\n  import { scaleBand } from 'd3-scale';\n  import { format } from 'd3-format';\n\n  import Column from './_components/Column.svelte';\n  import AxisX from './_components/AxisX.percent-range.html.svelte';\n  import AxisY from './_components/AxisY.percent-range.html.svelte';\n\n  import calcThresholds from './_modules/calcThresholds.js';\n\n  import data from './_data/unemployment.js';\n\n  const f = format('.2f');\n\n  let binCount = 40;\n\n  const xKey = ['x0', 'x1'];\n  const yKey = 'length';\n\n  const domain = extent(data);\n\n  $: steps = calcThresholds(domain, binCount);\n  $: hist = bin().domain(domain).thresholds(steps);\n\n  $: slimSteps = takeEvery(steps, 7);\n</script>\n\n<div class=\"input-container\" style=\"position: absolute;right:10px;z-index: 9;\">\n  <input style=\"margin:0;\" type=\"range\" min=\"4\" max=\"100\" step=\"4\" bind:value={binCount} />\n  <span\n    class=\"counter-container\"\n    style=\"display:inline-block;vertical-align:top;width: 70px;text-align:right;\"\n    >{binCount} bins</span\n  >\n</div>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr\n    percentRange\n    padding={{ top: 20, right: 5, bottom: 20, left: 31 }}\n    x={xKey}\n    y={yKey}\n    xDomain={steps}\n    xScale={scaleBand().paddingInner(0)}\n    yDomain={[0, null]}\n    data={hist(data)}\n  >\n    <Html>\n      <AxisX gridlines={false} baseline ticks={slimSteps} format={d => +f(d)} />\n      <AxisY gridlines={false} ticks={3} />\n    </Html>\n    <ScaledSvg>\n      <Column fill=\"#fff\" stroke=\"#000\" strokeWidth={1} />\n    </ScaledSvg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n\n  input {\n    height: auto;\n  }\n</style>"},"dek":"","components":[{"title":"./_components/Column.svelte","contents":"<!--\n  @component\n  Generates an SVG column chart.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, x, yRange, xScale, y, height } = getContext('LayerCake');\n\n  /** @type {String} [fill='#00e047'] - The shape's fill color. */\n  export let fill = '#00e047';\n\n  /** @type {String} [stroke='#000'] - The shape's stroke color. */\n  export let stroke = '#000';\n\n  /** @type {Number} [strokeWidth=0] - The shape's stroke width. */\n  export let strokeWidth = 0;\n\n  /** @type {Boolean} [false] - Show the numbers for each column */\n  export let showLabels = false;\n\n  $: columnWidth = d => {\n    const vals = $xGet(d);\n    return Math.abs(vals[1] - vals[0]);\n  };\n\n  $: columnHeight = d => {\n    return $yRange[0] - $yGet(d);\n  };\n</script>\n\n<g class=\"column-group\">\n  {#each $data as d, i}\n    {@const colHeight = columnHeight(d)}\n    {@const xGot = $xGet(d)}\n    {@const xPos = Array.isArray(xGot) ? xGot[0] : xGot}\n    {@const colWidth = $xScale.bandwidth ? $xScale.bandwidth() : columnWidth(d)}\n    {@const yValue = $y(d)}\n    <rect\n      class=\"group-rect\"\n      data-id={i}\n      data-range={$x(d)}\n      data-count={yValue}\n      x={xPos}\n      y={$yGet(d)}\n      width={colWidth}\n      height={colHeight}\n      {fill}\n      {stroke}\n      stroke-width={strokeWidth}\n    />\n    {#if showLabels && yValue}\n      <text x={xPos + colWidth / 2} y={$height - colHeight - 5} text-anchor=\"middle\">{yValue}</text>\n    {/if}\n  {/each}\n</g>\n\n<style>\n  text {\n    font-size: 12px;\n  }\n</style>"},{"title":"./_components/AxisX.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML x-axis, useful for server-side rendered charts. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<div class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $xScale(tick)}\n\n    {#if baseline === true}\n      <div class=\"baseline\" style=\"top:100%; width:100%;\"></div>\n    {/if}\n\n    {#if gridlines === true}\n      <div class=\"gridline\" style:left=\"{tickValUnits}{units}\" style=\"top:0; bottom:0;\"></div>\n    {/if}\n    {#if tickMarks === true}\n      <div\n        class=\"tick-mark\"\n        style:left=\"{tickValUnits + halfBand}{units}\"\n        style:height=\"{tickLen}px\"\n        style:bottom=\"{-tickLen - tickGutter}px\"\n      ></div>\n    {/if}\n    <div\n      class=\"tick tick-{i}\"\n      style:left=\"{tickValUnits + halfBand}{units}\"\n      style=\"top:calc(100% + {tickGutter}px);\"\n    >\n      <div\n        class=\"text\"\n        style:top=\"{tickLen}px\"\n        style:transform=\"translate(calc(-50% + {dx}px), {dy}px)\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .tick-mark {\n    border-left: 1px solid #aaa;\n  }\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  /* This looks a little better at 40 percent than 50 */\n  .axis.snapLabels .tick:last-child {\n    transform: translateX(-40%);\n  }\n  .axis.snapLabels .tick.tick-0 {\n    transform: translateX(40%);\n  }\n</style>"},{"title":"./_components/AxisY.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=-3] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = -3;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: halfBand = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValUnits = Math.max(...tickVals.map($yScale));\n</script>\n\n<div class=\"axis y-axis\">\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $yScale(tick)}\n\n    <div\n      class=\"tick tick-{i}\"\n      style=\"left:{$xRange[0]}{units};top:{tickValUnits + halfBand}{units};\"\n    >\n      {#if gridlines === true}\n        <div class=\"gridline\" style=\"top:0;\" style:left=\"{x1}px\" style:right=\"0px\"></div>\n      {/if}\n      {#if tickMarks === true}\n        <div class=\"tick-mark\" style:top=\"0\" style:left=\"{x1}px\" style:width=\"{tickLen}px\"></div>\n      {/if}\n      <div\n        class=\"text\"\n        style:top=\"0\"\n        style:text-align={labelPosition === 'even' ? 'right' : 'left'}\n        style:width=\"{widestTickLen}px\"\n        style:left=\"{-widestTickLen - tickGutter - (labelPosition === 'even' ? tickLen : 0)}px\"\n        style:transform=\"translate({dx + (labelPosition === 'even' ? -3 : 0)}px, calc(-50% + {dy +\n          (labelPosition === 'above' ||\n          (snapBaselineLabel === true && tickValUnits === maxTickValUnits)\n            ? -3\n            : 4)}px))\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n    width: 100%;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"}],"modules":[{"title":"./_modules/calcThresholds.js","contents":"export default function calcThresholds(domain = [0, 1], n) {\n  const breaks = [domain[0]];\n  const brk = (domain[1] - domain[0]) / n;\n  while (breaks[breaks.length - 1] < domain[1]) {\n    const node = breaks[breaks.length - 1] + brk;\n    breaks.push(node);\n  }\n  return breaks;\n}"},{"title":"./_data/unemployment.js","contents":"export default [\n  5.1, 4.9, 8.6, 6.2, 5.1, 7.1, 6.7, 6.1, 5, 5, 5.2, 7.9, 11.1, 5.9, 5.5, 5.6, 6.5, 7.7, 5.7, 6.7,\n  5.7, 4.8, 5.6, 9.5, 5.7, 4.7, 6.3, 5.7, 6.6, 5.5, 5.4, 9.3, 7.6, 6.3, 5.6, 5.9, 5.5, 5.2, 6, 6.4,\n  4.9, 5, 10.3, 7.2, 4.9, 6.9, 6.1, 5.1, 6.5, 8.6, 5.6, 5.2, 10.9, 6.7, 6.4, 5.7, 5.3, 5, 4.2, 7.3,\n  6.4, 5.1, 5.5, 7.2, 8.3, 13.9, 7, 1.9, 2.2, 5, 14.1, 5.6, 3.2, 8.1, 4.9, 5.9, 7.3, 3.6, 6.9, 4.4,\n  4.8, 21.7, 9.2, 7.4, 13.6, 6.9, 16.5, 5.7, 9.4, 3, 3, 8.7, 5.4, 5.4, 5.8, 16.4, 11.8, 6.5, 6.4,\n  7.6, 7.3, 7.7, 6.6, 4.9, 7, 8.5, 5.4, 5.9, 13, 5, 24.4, 3.2, 6.3, 4.1, 2.7, 3.3, 5.9, 5.1, 2.8, 6,\n  4.5, 5, 5.7, 4.4, 5.7, 5.9, 3.1, 3.7, 4.4, 3.9, 5, 5.1, 5.7, 3.7, 3.9, 3.9, 4, 3.2, 4, 3.7, 3.6,\n  3.4, 5, 5.3, 5.9, 5.9, 4.8, 6.2, 4.5, 4.5, 4.9, 5.1, 4.4, 3.2, 3, 3.8, 4.3, 7.1, 4.5, 4.6, 3.7,\n  3.6, 5.6, 4.4, 5.5, 3.8, 4.1, 4.7, 4.7, 3.7, 3.5, 4.6, 5, 3, 3.7, 4.3, 3.5, 4.8, 5.2, 4.8, 5.6,\n  6.4, 2.6, 4.8, 5.3, 4.4, 4.6, 7.3, 5.7, 6.6, 5.7, 10, 4.7, 7.3, 5.1, 8.7, 7.9, 5.1, 26.4, 4.9,\n  9.7, 8.9, 6.3, 6.1, 5.3, 8.2, 3.5, 5.4, 5, 9.2, 6.6, 5.2, 5.6, 4, 4.8, 4.3, 4.7, 7.1, 6.9, 5.7,\n  6.2, 6.2, 5, 3.5, 7.7, 4.5, 3.2, 4.8, 4, 5.7, 6.8, 6.6, 7.1, 5.7, 4.1, 7.9, 7.9, 7.4, 5.9, 10.6,\n  6.1, 5.7, 5.5, 8, 3.6, 4.3, 3.2, 3.1, 1.8, 3.1, 2.9, 3.1, 2.4, 2.7, 3.3, 4.9, 4.8, 3.6, 3, 4.7,\n  3.2, 4.1, 2.8, 2.5, 2.6, 3.9, 5.1, 3.3, 2.6, 2.3, 2.1, 2, 6.2, 2.3, 3.1, 2.1, 1.8, 2.6, 2.9, 2.9,\n  5, 2.5, 3.3, 5.3, 1.7, 3.6, 4.5, 3.9, 3.5, 4.6, 3.2, 2.7, 2.3, 2.7, 3.5, 4.9, 5.1, 5.1, 2.6, 5.9,\n  2.4, 2.4, 2.2, 2.1, 3.7, 2.1, 3.5, 2.2, 5.2, 6, 4.8, 4.8, 6.1, 5.4, 4.8, 5.8, 5.1, 4.5, 3.7, 6.5,\n  4.4, 4.7, 4.6, 4.2, 5.2, 4.6, 5.9, 5.3, 6.8, 4.4, 5.3, 4.8, 6.1, 5.3, 5.1, 5, 5.4, 4.1, 6.3, 5.1,\n  6.9, 4.3, 4.4, 7.2, 11.5, 6, 6.9, 4.5, 5.6, 6.6, 5.4, 5.3, 3.8, 4.7, 4.7, 4.7, 5.2, 5.4, 5.3, 4.6,\n  5.9, 5, 5.6, 3.1, 4.6, 3.9, 5.8, 4.3, 5, 5.1, 5.1, 4.3, 5.8, 6, 3.6, 6, 4.6, 4.5, 4.2, 6.7, 5.1,\n  5.5, 4.6, 5, 4.1, 4.1, 5, 6.9, 4.6, 5.2, 8.3, 7.2, 4.8, 4.6, 5, 8.1, 6.1, 5.7, 7.6, 6.6, 4.8, 4.8,\n  5.6, 7.5, 5.2, 6, 5.7, 4.7, 5.9, 4.8, 5.8, 5, 8.6, 6.1, 4.1, 5.4, 9.6, 6.4, 6, 4.4, 5.6, 5.3, 4.8,\n  5.2, 4.9, 5.5, 5.9, 5.1, 4.5, 6.5, 5.2, 7, 5.5, 6.8, 5.3, 6.7, 4.5, 4.7, 6.2, 7.4, 4.8, 5, 4.7,\n  5.9, 4.1, 5.5, 5.2, 5.4, 6.3, 5, 5.3, 5.4, 5.9, 4.6, 5, 4.4, 8.9, 5.6, 4.7, 5.3, 5.8, 5.4, 5.3,\n  7.3, 4.1, 4.7, 6.3, 7, 7.1, 6, 4.6, 6.4, 5.3, 6.4, 4.8, 5.7, 5.7, 5.6, 5.2, 5, 7.2, 5.5, 7.6, 4.7,\n  6.9, 6.8, 5.5, 6.3, 4.9, 7.1, 4.8, 6.6, 6.6, 5.8, 4, 4.5, 4.5, 6.4, 4.8, 5.3, 5.1, 5.7, 5.6, 6.8,\n  7.7, 5.4, 8.6, 6.5, 5.5, 6.4, 6.9, 7.5, 6.5, 5.9, 5.8, 7.4, 6.6, 6.6, 5.4, 7, 7.7, 6, 6.3, 5.6,\n  7.3, 6.3, 7.3, 5, 6.4, 8.2, 4.5, 6.2, 5.3, 4.7, 5.4, 7, 6.3, 6.6, 8.6, 8.5, 4.4, 5.7, 6.8, 6.7, 6,\n  5.8, 4.1, 3, 3.4, 3.4, 3.5, 4.9, 3.6, 3.4, 4.6, 3.7, 2.8, 4.9, 4.3, 3.2, 4.1, 3.7, 2.6, 4.4, 3.2,\n  2.9, 3.3, 5.9, 4.1, 4.2, 2.9, 3.2, 4.3, 3, 4.8, 3.1, 2.8, 4, 3.2, 4.8, 6.9, 3.6, 2.9, 3.1, 3.1,\n  3.1, 3.7, 4.1, 4.2, 5.9, 2, 3.4, 4.2, 5.3, 4.7, 9.5, 4.7, 5.8, 3.2, 5.8, 5.7, 4.8, 4.8, 5, 5.8,\n  5.5, 6.4, 4.1, 6, 5.7, 5.6, 5, 5, 5.6, 4.6, 4.4, 6.1, 5.2, 4.5, 6, 5.3, 8, 6.9, 7.6, 5.3, 5.9,\n  6.1, 6.9, 8.1, 5.8, 5.4, 4.9, 5.5, 6.2, 6.5, 5.5, 4.4, 8.3, 5.1, 6.1, 4.7, 5.6, 4.8, 6.2, 7.6,\n  4.8, 5.2, 5.1, 6.8, 4.6, 5.1, 6.6, 5.5, 6, 6.2, 5.9, 7.1, 7.4, 3.9, 5.3, 3.9, 6.3, 4.6, 4.5, 5.3,\n  6.6, 6.9, 4.8, 4.4, 6.8, 8.6, 5.2, 4.8, 5.8, 6, 6.2, 8.1, 4.6, 4.9, 4.3, 5.6, 6.7, 5.6, 6, 7.1,\n  7.1, 6.5, 5.2, 3.8, 8.4, 6.2, 5.8, 5.4, 6.2, 6.4, 4.9, 3.8, 4.3, 3.6, 4.3, 5.7, 3.6, 3.8, 4.4,\n  4.7, 4.4, 5, 4, 5.6, 3.6, 4.7, 3.6, 4.2, 5.5, 3.3, 4, 5.9, 4.4, 5.9, 4.2, 4.8, 3.8, 5.1, 6.6, 3.4,\n  4, 4.4, 3.6, 4.7, 4.8, 4.2, 4, 5.1, 4.7, 5, 4.8, 3.8, 4.5, 4, 3.7, 6.6, 6, 5.6, 4.9, 4.7, 3.9,\n  4.1, 4.8, 5.1, 4.1, 4.2, 5.3, 4.2, 4.9, 5.2, 5.4, 5.1, 4.9, 4.6, 5.3, 4.3, 4.6, 4.5, 4.5, 4.5, 4,\n  5, 4.9, 4, 4.2, 5.2, 3.8, 6.1, 5.3, 4.3, 3.8, 4.2, 4.4, 6.5, 5.7, 4.5, 5, 4.4, 4.6, 4.9, 3.6, 3.9,\n  4, 3.4, 2.9, 4.9, 5.7, 3.7, 4, 5.8, 3.4, 4.2, 4.6, 4.4, 4.5, 4.7, 3.1, 3, 3.8, 4.4, 4.1, 4.6, 3.4,\n  4.1, 4.2, 6.1, 5.2, 3.2, 5.3, 3.5, 3.7, 5.9, 3.5, 4, 4.2, 5, 3.9, 3.8, 4.1, 4.3, 3.7, 3.6, 4, 3,\n  4.2, 3.7, 4.4, 3.6, 3.2, 2.8, 3.2, 4.5, 4, 4.6, 3.2, 4.4, 5.1, 3, 8.1, 4.3, 4.5, 3.8, 2.3, 3.7,\n  4.3, 3.4, 4.9, 4, 3, 4.6, 5.4, 4.2, 4.4, 3, 3.1, 6.4, 3.9, 2.9, 3.4, 4.1, 3.8, 4, 3.7, 3, 5.4,\n  3.2, 2.4, 2.9, 4.2, 3.9, 4.4, 4.9, 7.4, 3.8, 3.5, 4.6, 4.7, 4.1, 3.6, 4.2, 3.5, 4.5, 6.9, 4.6,\n  7.4, 4.4, 5, 5.7, 4.2, 4.6, 4.6, 5.9, 5.2, 3.3, 3, 4.8, 5.1, 8.2, 3.2, 5.1, 5.4, 4.7, 4.7, 4.7,\n  4.1, 3.3, 6.8, 3.4, 4.3, 3.5, 3.6, 4.8, 6.4, 3, 5, 3.9, 2.6, 2.7, 5.7, 3.2, 4, 6.3, 2.8, 2.7, 4,\n  4.1, 4.5, 3.7, 3.7, 4.8, 3.5, 6.2, 3.9, 4.5, 4, 7, 3.2, 4.3, 3.9, 5.9, 3.6, 2.9, 4.3, 3.1, 6.9,\n  4.3, 4.6, 3, 8.1, 4.1, 2.9, 4.6, 4.1, 4.5, 3.6, 3.6, 4.1, 5, 2.6, 5.2, 3.2, 4.8, 3.7, 5.5, 4.7,\n  4.6, 4, 2.7, 5.2, 4.9, 4.5, 2.9, 3.8, 3.7, 5, 3.3, 4.7, 4.9, 3.2, 4.2, 3.8, 3.3, 3.9, 2.6, 6.9,\n  6.9, 6.1, 6.1, 3.9, 3.6, 9, 4.3, 6.5, 8.3, 3.5, 4.6, 8.3, 4.5, 5.4, 8.3, 5.7, 3.8, 4.8, 5, 4.1,\n  3.5, 6.8, 5, 10.6, 4.4, 6, 4.5, 9.7, 6.4, 5.2, 4.6, 4, 5.4, 11.7, 5.2, 3.3, 5.5, 10.4, 3.6, 6.6,\n  4.4, 4.3, 4.2, 6.4, 6.2, 4, 8.8, 4.7, 4.1, 11.6, 4.4, 4.4, 4.5, 3.9, 5.1, 5.5, 6.9, 4.2, 3.6, 9.2,\n  3.8, 10.5, 7.5, 3.9, 5.8, 10.6, 8.3, 13.2, 11.8, 8.4, 5.6, 6.7, 4.2, 5.6, 5.7, 7.3, 4.5, 3.8,\n  16.3, 4.3, 5.5, 9, 6, 4.7, 7.1, 4.4, 3.8, 3.6, 6, 6.8, 6.7, 4.3, 4.9, 6.3, 3.1, 3.8, 8.7, 4.3,\n  10.4, 10.3, 6.9, 5, 6.1, 5.3, 5.3, 7.6, 3.6, 3.3, 4.2, 3.5, 4.8, 3.9, 5, 5.4, 6.4, 3.5, 4, 6.8,\n  5.5, 6.4, 9.5, 3, 7.9, 7.5, 5.3, 9, 7.8, 6.7, 8, 5.9, 7.4, 5.5, 8.4, 4.8, 9.6, 7.5, 9.2, 8, 5.7,\n  11.8, 6.2, 8.5, 9.6, 7.8, 9.7, 7.4, 6.3, 5.9, 6.7, 6.7, 6.7, 6.7, 7.5, 5.3, 9.4, 10.4, 8.1, 6.7,\n  6.7, 5.9, 7.2, 6.9, 6.8, 7.7, 7.3, 6.9, 6, 8.5, 8.1, 7.5, 8.9, 8.3, 10.1, 5.7, 7.5, 10.5, 7.3,\n  6.9, 7.9, 8.1, 7.9, 9.4, 6.1, 12, 5.5, 8.5, 3.2, 4.8, 2.6, 4, 3.2, 3.2, 2.7, 2.9, 4.2, 4, 4.8,\n  2.6, 4.9, 3.6, 4.6, 2.9, 6.4, 4, 4.7, 4.1, 4.8, 3.8, 5.3, 4.7, 6.2, 3.9, 5.2, 4.3, 3.4, 4.7, 3.4,\n  4.6, 3.8, 4.5, 6.5, 4, 5.2, 5.5, 5.8, 6.9, 3.4, 3.9, 4.7, 2.7, 3.9, 3.3, 5.3, 3.6, 3.2, 1.8, 3.4,\n  4, 3.7, 4.1, 5.8, 6.1, 3.3, 5, 5, 6.3, 6.8, 3.5, 4.7, 4.6, 4.4, 4.4, 4.4, 4.2, 3.7, 4, 6, 6, 3.4,\n  6.2, 5.5, 4.5, 3.6, 4.1, 5, 5.8, 5.5, 3.4, 4.5, 4.9, 5.2, 4.3, 4, 3.6, 5.8, 4.7, 4.2, 4.6, 3.7,\n  5.4, 3.2, 6.4, 6, 6.4, 3.5, 4.4, 4.6, 4.4, 3.1, 5.9, 4.9, 4.9, 4.2, 4.9, 5.1, 4.1, 4.8, 4.3, 4.5,\n  7.6, 4.8, 4.2, 4.7, 5, 6.3, 6.6, 4.9, 5.6, 4.9, 3, 6.6, 6.8, 4.6, 6.5, 3.7, 5.2, 7, 4.6, 5.3, 4.6,\n  3.5, 7.3, 5.1, 5.1, 3.8, 3.8, 4.8, 3.7, 4, 3.3, 3.9, 4.9, 3.4, 5.6, 4, 3.9, 3.2, 7.6, 3.1, 7.9,\n  4.3, 3.5, 3.6, 3, 3.9, 3.7, 3.7, 3.7, 4.1, 3.5, 3.4, 5.5, 4.2, 7.7, 4, 5.1, 3.5, 4.2, 7.7, 3.9,\n  4.3, 4.5, 3.7, 3.2, 3.4, 4.1, 5.2, 5.6, 3.9, 4, 4.8, 4.5, 3, 3.3, 2.9, 3.6, 4.6, 3, 3.6, 4.3, 4.8,\n  3, 4.4, 2.8, 3.8, 6.3, 4, 5.2, 3.6, 2.2, 4.3, 5.7, 3.2, 3.6, 3.7, 3.5, 3.8, 2.7, 4.8, 3.9, 3, 3.2,\n  5.1, 4, 3.4, 5.1, 3.4, 3.7, 3.5, 3.7, 8.2, 5, 7.1, 6.5, 6.5, 7.4, 5.2, 7.3, 6.3, 5.3, 12.3, 6.4,\n  7.8, 8.1, 6.4, 5.6, 4.1, 5.8, 6.8, 7.7, 8, 4.9, 5.9, 5.3, 5.2, 10.9, 11.2, 9.9, 4.8, 6.4, 7.8,\n  15.4, 9.3, 5.9, 8.2, 4.9, 4.5, 5.8, 7.4, 5.6, 4.8, 9, 5.8, 5.9, 4.2, 6.8, 5.7, 6.3, 6.3, 5.4, 5.9,\n  8, 5.6, 6.7, 5.9, 7, 6.7, 4.5, 5.3, 8.3, 3.8, 4.5, 8, 5.5, 5.1, 6.8, 8.4, 5.7, 5.4, 5.2, 5.1, 6.1,\n  4.2, 7.9, 6.4, 9.2, 7.6, 6.1, 10.1, 7.4, 6, 7, 6.7, 4.5, 5.9, 5.1, 5.3, 6, 6, 7.3, 6.2, 4.1, 4.9,\n  6.9, 5.6, 5.2, 5.5, 5.3, 5.9, 7.8, 5, 6.4, 5.1, 4.5, 8.7, 4.5, 5, 4.6, 5.7, 5.9, 5.6, 6.5, 4.6,\n  5.1, 6.6, 7.3, 9.1, 4.9, 5, 4.7, 4.6, 5.6, 4.7, 5.9, 6.6, 4, 5.4, 7.2, 8.4, 6, 5.2, 4.9, 6.1, 4.1,\n  6.2, 4.9, 5.4, 4.9, 4.8, 9, 4.5, 4.9, 6, 6.9, 6.8, 5, 5, 5.4, 7.7, 4.9, 5.5, 5.1, 6.4, 9.9, 5.5,\n  6, 7, 4.2, 8.8, 9.9, 4.3, 6.1, 5.6, 5.4, 4.4, 6.4, 6.8, 5.1, 4.4, 6.6, 5.5, 8.1, 8.4, 4.1, 7.3,\n  5.8, 6.7, 5.1, 5.8, 7.6, 4.6, 6.9, 8, 4.8, 7.1, 6, 7.4, 6.1, 7.6, 5.8, 4.6, 7.2, 6.1, 5.9, 3.6,\n  7.3, 6.6, 2.9, 7.7, 4.4, 4.3, 3.5, 2.4, 3.8, 3.6, 3.7, 2.3, 4, 4.2, 3.1, 3.3, 4.8, 2.3, 2.4, 9,\n  3.2, 5.5, 4.9, 4.5, 2.7, 4.8, 3.3, 3.1, 7.9, 2.1, 3.1, 4.2, 7.1, 3.5, 4.3, 3.3, 3.1, 4.6, 4.7,\n  2.5, 4.5, 3, 4.5, 4.9, 6.2, 6.8, 7, 3.2, 4.3, 3.9, 2.9, 3.5, 3.3, 4.1, 3, 4.9, 4.6, 3.7, 3.3, 2.5,\n  5.4, 4.2, 4.1, 2.8, 3.6, 2.8, 3.5, 2.8, 3.6, 3.2, 3.5, 2.8, 2.5, 2.5, 3.3, 3, 3.2, 3.2, 2.6, 4.5,\n  3.4, 3, 3.4, 3.4, 3.3, 3.5, 2.5, 2.8, 3.3, 2.8, 3.3, 3.5, 3.2, 2.7, 2.7, 2.6, 3.7, 3.4, 2.9, 2.9,\n  2.8, 4.1, 3.1, 2.7, 2.9, 2.7, 3.1, 2.4, 3, 2.3, 4.3, 2.8, 3, 3.2, 3, 3.7, 2.5, 3, 3.7, 3.5, 2.9,\n  4.3, 3, 3.6, 2.4, 2.5, 2.8, 2.5, 3.5, 2.7, 3.2, 3.3, 2.6, 3.1, 3.1, 3.2, 3.8, 3.1, 3.4, 3.3, 2.6,\n  2.7, 2.8, 3.2, 4.6, 2.9, 3.2, 3.4, 3.7, 2.7, 2.9, 5.8, 6, 5.3, 4.4, 4.7, 5.1, 5.5, 5.9, 5.3, 7.3,\n  8.6, 7.5, 6, 5.8, 4.9, 4.6, 6, 2.6, 2.8, 2.9, 3.5, 2.4, 3.2, 2.6, 3.1, 2.7, 2.5, 7.1, 4.7, 5, 6,\n  5.7, 7.9, 6.6, 5.6, 5.2, 4.1, 4.9, 4.9, 4.8, 4.2, 5.4, 6.8, 6.8, 4.4, 5, 5.6, 5.1, 6.2, 6.9, 6.9,\n  9.1, 5.6, 5.4, 5, 7.1, 7.2, 6.6, 6.4, 7.3, 5.4, 9.8, 6, 4.5, 10, 9.8, 8, 6.4, 7, 7.3, 6.1, 7.1,\n  9.4, 8.1, 5.5, 7.8, 8, 8.3, 9.3, 4.5, 7.6, 4, 4.9, 7.8, 5, 5.2, 4.4, 5.1, 5.2, 4.4, 5.1, 3.3, 4.6,\n  4.9, 4, 4.6, 4.1, 4.8, 5.2, 3.8, 4.5, 2.9, 4.4, 5.1, 5.9, 5.4, 4.2, 4.6, 4.6, 5.2, 3.8, 4.9, 5.2,\n  4.3, 4.2, 3.7, 4.2, 5.2, 5.7, 4.3, 3.9, 5, 4.1, 5.9, 4.1, 5.8, 3.5, 4.2, 4.7, 4.6, 3.8, 5, 4.3,\n  4.1, 4.5, 3.7, 4.3, 4.1, 3.8, 4.5, 4.2, 4.1, 3.7, 4.8, 4.5, 5.1, 5.9, 4.5, 4.8, 5.6, 6.4, 6.7,\n  5.7, 3.9, 5.1, 4.6, 5.3, 5.3, 4.7, 5.5, 4.9, 4.3, 5.4, 6.5, 5.1, 5.6, 6.1, 5.1, 6.3, 4.6, 4.2,\n  4.9, 4.6, 5.4, 4.5, 8.5, 4.9, 5.1, 5.3, 5.2, 7.1, 4.4, 5, 5.3, 7.8, 5.8, 4.4, 4.3, 6.5, 6.5, 6.4,\n  4.7, 5.1, 4.5, 5.1, 5.7, 5.4, 4.6, 4.6, 5.1, 4.9, 6.8, 4.7, 6, 5.2, 5, 6.8, 4.7, 7.3, 5.4, 4.5,\n  5.1, 6.2, 5.2, 6.3, 5.4, 5.7, 4.9, 4.8, 6.9, 7.3, 5.5, 5.5, 6.6, 5.6, 8.9, 4.7, 4.9, 4.8, 4.9,\n  4.8, 6.2, 4.4, 7.3, 4.2, 7, 6.9, 4.7, 5.6, 4.7, 8.1, 4.4, 5.1, 2.3, 3.2, 3.1, 2.5, 3.2, 1.8, 3.8,\n  2.3, 2, 1.9, 1.8, 2, 2.2, 2.8, 3.1, 2.5, 2.4, 2.3, 2.1, 2.3, 2.9, 2.6, 2, 2.9, 4.1, 2.4, 3.1, 3.1,\n  4.5, 2.9, 2.9, 2.9, 5.3, 4.5, 3, 2.5, 1.9, 3.5, 2.7, 14.2, 1.6, 3.7, 5.3, 2.3, 3.3, 1.7, 2.1, 2,\n  2.7, 3.6, 3.5, 2.7, 3.7, 6.8, 4.6, 4.3, 5.3, 6, 3.5, 6.3, 5, 4.2, 6, 4.1, 4.7, 4.1, 5.4, 6, 6.2,\n  5.5, 5.5, 3.7, 4.3, 3.4, 4.6, 3.9, 3.9, 3.9, 4, 6.4, 4.4, 4.2, 5.8, 4.2, 3.5, 4.9, 6.4, 4.2, 5.5,\n  4.5, 3.3, 5, 7, 7.4, 4.1, 4.8, 6.1, 4.1, 3.9, 5.9, 4.9, 3.5, 5.8, 4.7, 4.3, 7.6, 3, 4, 9.1, 4.6,\n  6.8, 4.4, 5.3, 7.3, 4.6, 4.2, 5.5, 4.2, 6.8, 4.5, 4.3, 3.2, 4.9, 4.8, 4.1, 7, 4.4, 3.7, 4.9, 4.7,\n  6, 5, 3.5, 3.7, 5.9, 3.9, 6.4, 3.6, 4.1, 4, 3.4, 5.8, 3.6, 7.1, 3.2, 7.7, 3.7, 4.3, 5.6, 4.3, 5.4,\n  5.6, 8.3, 2.7, 4, 7.5, 4.8, 5.2, 4.9, 6.3, 4.9, 5.2, 4.1, 3.7, 4.5, 5.7, 5.2, 3.1, 7.9, 3.6, 4.3,\n  8.8, 7.5, 4.9, 8, 6.5, 6.7, 3.6, 5.6, 9.7, 7.4, 5.5, 4.3, 3.3, 4.3, 7.7, 9.5, 4.3, 5.1, 5.5, 4.3,\n  6, 4, 6.5, 6.1, 4.5, 7.4, 6.1, 5.3, 7.1, 3.9, 6.5, 4.2, 5, 7.7, 5.4, 5.6, 7.3, 6.5, 10.4, 3.5,\n  4.5, 5.2, 5.2, 5, 7.2, 3.3, 6.4, 6.7, 5, 5.2, 5.1, 7.1, 7.3, 6.9, 7, 5.1, 7.3, 7.1, 6.1, 5.9, 4,\n  6.8, 6.6, 7.4, 7.2, 5.7, 6.2, 5.9, 6.7, 6.1, 5.9, 5.8, 5, 6, 4.3, 5.2, 5.9, 6.3, 5, 5.9, 5, 4.9,\n  5.4, 4.5, 5.9, 8, 6.8, 5.8, 5.6, 5.7, 6.5, 5.2, 5.7, 7.7, 8.2, 6.7, 4.8, 4.6, 7.2, 7.5, 7.3, 6.2,\n  6.7, 4.7, 5.3, 5.6, 6.7, 7.1, 8.5, 8.5, 5.7, 6.3, 8.1, 7.1, 8.3, 7.3, 5.8, 6.4, 4.8, 7, 5.1, 6.3,\n  6.9, 7, 7.2, 6.8, 6, 6.9, 4.7, 4.9, 5.9, 6.6, 5.1, 7.7, 6.8, 7.8, 6.7, 5.1, 7.5, 7, 5.4, 7.4, 5.4,\n  8, 5.9, 6.6, 5.6, 6.6, 6.2, 5.2, 5, 5.3, 4.8, 6.3, 5, 6.1, 5.6, 9.1, 5.2, 11.4, 8, 5.1, 5, 7.4,\n  4.5, 6.6, 8.4, 5.7, 7.1, 5.8, 6.8, 7.1, 4.9, 6.1, 7.7, 5.8, 6.6, 4.7, 5.8, 6.2, 5.4, 4.7, 5.8, 6,\n  5.6, 8.2, 4.5, 5.8, 8.6, 9.1, 4.8, 5.5, 11.3, 5.6, 5.4, 4.8, 5.3, 6.5, 6.5, 7.9, 5.2, 1.9, 2.3, 4,\n  2.4, 2.5, 2.4, 2.5, 9.8, 2.9, 2.5, 3, 2.9, 2.7, 2.6, 5.5, 3.1, 1.9, 3.6, 3.2, 14.1, 2.2, 2.1, 3.8,\n  2.5, 2.5, 2.6, 2.1, 2.4, 1.9, 3.2, 2.1, 2, 2, 2.8, 2.8, 2.4, 2.4, 2.1, 3, 2.9, 1.8, 5, 2.1, 3.6,\n  2.8, 2.7, 3.8, 2.4, 2.2, 3.6, 13.2, 2.6, 2.8, 2.3, 3.3, 2.5, 2.6, 2, 1.9, 6.8, 1.9, 2.4, 2.9, 4.3,\n  2.3, 5.6, 5.1, 5.3, 7.4, 6.6, 4.5, 4.7, 6.7, 4.9, 7.1, 5.9, 4, 5.7, 6.4, 6.4, 6, 4.9, 5.2, 5.9,\n  3.8, 7.3, 5.8, 4.4, 6.1, 5.3, 6, 5.7, 6.2, 4.3, 5.4, 5.8, 6.6, 5.3, 5, 8, 6.2, 6.2, 5.5, 6.5, 7,\n  6, 4.6, 7.7, 6.2, 7.3, 5.4, 4.9, 4.3, 7.3, 7.8, 5.9, 5.8, 4.4, 4.8, 5.8, 7.4, 4.5, 5.3, 6.7, 4.8,\n  4.2, 7.2, 5.5, 5.5, 4.2, 6.6, 7.5, 5.6, 6.2, 5.7, 5.8, 5.2, 7.5, 5.8, 4.4, 4, 7.4, 6.1, 4.2, 5.8,\n  4.6, 6.8, 5.5, 4.1, 5.9, 4.9, 6.9, 5.9, 5.8, 4.8, 5.1, 6.2, 7.3, 5.4, 3.7, 4, 4.8, 4.9, 6.6, 5.9,\n  4.5, 3.5, 5.7, 5.9, 4.6, 4.3, 4.1, 3.5, 8.5, 4.8, 4.1, 3.3, 3.4, 4.7, 5.4, 5.7, 3.9, 4.3, 4.8,\n  12.5, 4.8, 5.2, 3.8, 4.5, 5.5, 4.6, 7.6, 7.8, 3.5, 8.2, 3.5, 6.8, 5.5, 3.5, 4.5, 6, 3.9, 6.4, 3.8,\n  3.6, 5.3, 4.2, 4.6, 3.2, 4.2, 4.9, 5, 9.1, 6.7, 5.1, 4.1, 2.5, 4.2, 6, 3.5, 4.3, 3.7, 6, 5.7, 7.4,\n  5.3, 12.1, 5.7, 6.8, 5.2, 4.1, 5.4, 4.7, 4.6, 4.1, 4.1, 4.7, 5.5, 4.6, 5.7, 5.5, 7.2, 5.4, 3.7,\n  5.9, 3.8, 3.1, 4.3, 5.7, 4.6, 7.3, 4, 6.8, 7.6, 4, 6.4, 8.2, 5.3, 3.2, 4.2, 6.8, 5.8, 6.7, 2.1,\n  5.1, 3.7, 3.8, 5.3, 8.4, 4.8, 5.1, 5, 4.5, 5, 6.1, 7, 4.5, 6.7, 3.3, 5.2, 5.3, 8.8, 2.9, 7.6, 9.9,\n  11.3, 4.7, 6.2, 5.3, 4, 3.6, 5.4, 2.9, 3.9, 3.9, 3.6, 6.6, 7.9, 5.3, 5.4, 7.1, 4.6, 5.7, 4.7, 4.2,\n  7.3, 8.5, 6.2, 5.1, 5.5, 4.3, 4.4, 3.7, 4.5, 5.1, 4.4, 2.2, 4.8, 7.7, 4.8, 3.7, 7.6, 11.4, 4.8, 5,\n  4.6, 5.6, 4.6, 7.3, 5.1, 5.5, 3.2, 13.1, 3.9, 5.5, 4.6, 7.9, 5.1, 5.9, 5.4, 3.4, 7.5, 5.9, 7.5,\n  4.3, 2.8, 5.9, 7.1, 3.6, 11.9, 4.5, 3.2, 7.7, 5.3, 6.6, 6.1, 7.4, 4.9, 5.5, 3.9, 4.8, 6.4, 9.8,\n  9.6, 6.9, 7.8, 3.9, 5.9, 6.3, 4, 6.5, 3.4, 5.1, 5.1, 14.1, 5.9, 3.8, 4.9, 8.5, 4.7, 4.2, 4, 4.1,\n  5.5, 4, 7.2, 4.7, 3.4, 6.7, 8.2, 7.3, 5, 5.6, 6.7, 4.6, 5.7, 6.2, 6.4, 5.8, 5.6, 5.2, 5.4, 4.4,\n  4.6, 5.4, 13.3, 3.6, 4.2, 8.5, 5.1, 5.8, 5, 4.8, 11.2, 17.3, 6.1, 3.3, 3, 6.1, 3.4, 3.1, 8.6, 5.9,\n  5.3, 3.5, 4.6, 3.4, 2.8, 3.2, 2.8, 4.8, 2.2, 3.2, 7.3, 4, 4.2, 2.9, 3.9, 9.8, 3.1, 3, 3.5, 5.3,\n  3.7, 3.1, 4, 4.2, 2.7, 5.2, 3.2, 3.7, 3.7, 2.9, 4.5, 4, 3.1, 3.3, 3.1, 4.3, 3.6, 4.9, 4.3, 4.6,\n  4.7, 2.6, 3.6, 3.6, 4.1, 6.4, 3.5, 5.9, 10.9, 5.1, 4.5, 4.3, 5.9, 4.4, 5.2, 3.8, 3.3, 4.4, 3.8,\n  4.6, 10, 4.8, 4.7, 3.2, 3.4, 4.4, 3.4, 4.3, 3.4, 6.9, 3.6, 3.6, 5.2, 3.2, 5.1, 6.2, 3.5, 3.9, 5.4,\n  3, 4.4, 3.8, 4.2, 4.1, 3.7, 4.4, 6.9, 3.2, 3.7, 4.6, 3.1, 3.8, 5.6, 3.7, 4.5, 3.5, 3.3, 5, 4.4, 4,\n  3.9, 4.5, 4.5, 4.9, 3.6, 5.6, 4.9, 3.6, 10, 3.5, 3.3, 3.6, 4.3, 3.6, 6.5, 4.6, 3.6, 5.6, 3.8, 4.1,\n  4, 5.6, 5.9, 8.1, 3.9, 4.6, 4.2, 8.7, 7, 4, 2.9, 5.2, 5.1, 3.5, 4.4, 4.5, 5.8, 6.6, 6.4, 3.1, 2.7,\n  5.9, 4.7, 5.1, 5.7, 5.2, 6.5, 7.4, 5.5, 3.5, 3.5, 6.8, 5.1, 5.4, 7.2, 7.4, 3.6, 6.2, 6.7, 4.7,\n  4.4, 4, 3.9, 4.7, 4, 4.1, 5.9, 3.9, 4.8, 4.7, 6.5, 5.1, 7.6, 6.6, 5.9, 7.6, 6.6, 9.8, 6.5, 5.3,\n  6.6, 8.7, 6, 7.2, 3.9, 5.9, 5.8, 6.5, 8.1, 4.1, 8.3, 6.1, 7.7, 8.9, 6.5, 3.9, 6.7, 6.7, 4.3, 6.3,\n  7.9, 5.9, 8.4, 5.6, 6.3, 5.5, 7.3, 5.8, 4, 8.5, 6.9, 6.5, 4.8, 8.5, 9.1, 4.9, 6.8, 6.8, 6.1, 4.5,\n  4.1, 6.5, 5.3, 5.4, 5.9, 3.4, 5.2, 7.1, 7.4, 10, 13.1, 6, 7, 7, 6.7, 6, 11.7, 4.5, 4.5, 4.5, 8.5,\n  5.3, 3.5, 7.5, 5.1, 5.2, 4.6, 6.3, 5.3, 5.9, 8.5, 5.5, 5.2, 4.8, 8.1, 7, 6.3, 8.2, 8.1, 8.1, 5.7,\n  9.4, 5.6, 5.1, 3.9, 5.8, 3.6, 4.2, 4.9, 3.4, 3.6, 3.2, 3.3, 4.3, 2.8, 3.7, 3.4, 5.2, 3.8, 3.4,\n  5.5, 3.6, 6.2, 3.7, 3.1, 3.9, 3, 7, 3.7, 3.9, 4, 4.8, 3.1, 3.7, 2.9, 5.4, 4.3, 4.3, 3.4, 5.2, 4.7,\n  8.6, 5.5, 3.5, 3.9, 4.3, 3.5, 3.4, 3.2, 3.8, 3.8, 3.5, 3.8, 5.3, 3.4, 4.3, 4.5, 3.5, 3.1, 5.6,\n  3.9, 3.3, 3.5, 3.4, 3.1, 4.5, 4, 4.6, 3.4, 3.6, 3.7, 4.6, 3.7, 4.7, 3.3, 4.4, 6.8, 4.1, 6, 4, 6.6,\n  3.3, 4.3, 4.4, 4, 3.8, 6.8, 3.3, 3.7, 4.6, 4, 5.4, 5.7, 2, 5.3, 4.5, 4.9, 15.7, 14.5, 14.9, 14.5,\n  15.1, 13, 13.7, 18.7, 15, 14.1, 9.2, 12.9, 10.7, 12.8, 12.4, 8.8, 9.9, 11.2, 13.4, 16.9, 10.6,\n  19.5, 13.7, 12.6, 3.8, 8.5, 13.8, 15.4, 17.9, 17.3, 18.1, 6.3, 9.2, 14.1, 12.7, 14.2, 14.3, 12.5,\n  15.8, 13.4, 18.8, 17.8, 13.7, 14.7, 12.7, 15, 12.2, 13.7, 17.7, 14.5, 15.6, 14.3, 12.8, 13.6,\n  15.4, 20.6, 16.9, 13.8, 16.1, 13.3, 11.5, 16.5, 23.4, 15.4, 8.2, 13.2, 18.1, 20.6, 8.9, 9.1, 7.6,\n  15.3, 12, 14.3, 11.3, 19.6, 16.6, 18\n];"}],"componentModules":[],"componentComponents":[],"csvs":[],"jsons":[]}