{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, ScaledSvg, Html } from 'layercake';\n\n  import Line from './_components/Line.svelte';\n  import Area from './_components/Area.svelte';\n  import AxisX from './_components/AxisX.percent-range.html.svelte';\n  import AxisY from './_components/AxisY.percent-range.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/points.csv';\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  data.forEach(d => {\n    d[yKey] = +d[yKey];\n  });\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr\n    percentRange\n    padding={{ top: 8, right: 10, bottom: 20, left: 25 }}\n    x={xKey}\n    y={d => d[yKey]}\n    yDomain={[0, null]}\n    {data}\n  >\n    <Html>\n      <AxisX />\n      <AxisY ticks={4} />\n    </Html>\n    <ScaledSvg>\n      <Line />\n      <Area />\n    </ScaledSvg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>"},"dek":"A simple line and area chart.\n","components":[{"title":"./_components/Line.svelte","contents":"<!--\n  @component\n  Generates an SVG line shape.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  /** @type {String} [stroke='#ab00d6'] - The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let stroke = '#ab00d6';\n\n  $: path =\n    'M' +\n    $data\n      .map(d => {\n        return $xGet(d) + ',' + $yGet(d);\n      })\n      .join('L');\n</script>\n\n<path class=\"path-line\" d={path} {stroke}></path>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./_components/Area.svelte","contents":"<!--\n  @component\n  Generates an SVG area shape.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale, extents } = getContext('LayerCake');\n\n  /**  @type {String} [fill='#ab00d610'] The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let fill = '#ab00d610';\n\n  $: path =\n    'M' +\n    $data\n      .map(d => {\n        return $xGet(d) + ',' + $yGet(d);\n      })\n      .join('L');\n\n  /**  @type {String} **/\n  let area;\n\n  $: {\n    const yRange = $yScale.range();\n    area =\n      path +\n      ('L' +\n        $xScale($extents.x ? $extents.x[1] : 0) +\n        ',' +\n        yRange[0] +\n        'L' +\n        $xScale($extents.x ? $extents.x[0] : 0) +\n        ',' +\n        yRange[0] +\n        'Z');\n  }\n</script>\n\n<path class=\"path-area\" d={area} {fill}></path>"},{"title":"./_components/AxisX.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML x-axis, useful for server-side rendered charts. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<div class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $xScale(tick)}\n\n    {#if baseline === true}\n      <div class=\"baseline\" style=\"top:100%; width:100%;\"></div>\n    {/if}\n\n    {#if gridlines === true}\n      <div class=\"gridline\" style:left=\"{tickValUnits}{units}\" style=\"top:0; bottom:0;\"></div>\n    {/if}\n    {#if tickMarks === true}\n      <div\n        class=\"tick-mark\"\n        style:left=\"{tickValUnits + halfBand}{units}\"\n        style:height=\"{tickLen}px\"\n        style:bottom=\"{-tickLen - tickGutter}px\"\n      ></div>\n    {/if}\n    <div\n      class=\"tick tick-{i}\"\n      style:left=\"{tickValUnits + halfBand}{units}\"\n      style=\"top:calc(100% + {tickGutter}px);\"\n    >\n      <div\n        class=\"text\"\n        style:top=\"{tickLen}px\"\n        style:transform=\"translate(calc(-50% + {dx}px), {dy}px)\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .tick-mark {\n    border-left: 1px solid #aaa;\n  }\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  /* This looks a little better at 40 percent than 50 */\n  .axis.snapLabels .tick:last-child {\n    transform: translateX(-40%);\n  }\n  .axis.snapLabels .tick.tick-0 {\n    transform: translateX(40%);\n  }\n</style>"},{"title":"./_components/AxisY.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=-3] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = -3;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: halfBand = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValUnits = Math.max(...tickVals.map($yScale));\n</script>\n\n<div class=\"axis y-axis\">\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $yScale(tick)}\n\n    <div\n      class=\"tick tick-{i}\"\n      style=\"left:{$xRange[0]}{units};top:{tickValUnits + halfBand}{units};\"\n    >\n      {#if gridlines === true}\n        <div class=\"gridline\" style=\"top:0;\" style:left=\"{x1}px\" style:right=\"0px\"></div>\n      {/if}\n      {#if tickMarks === true}\n        <div class=\"tick-mark\" style:top=\"0\" style:left=\"{x1}px\" style:width=\"{tickLen}px\"></div>\n      {/if}\n      <div\n        class=\"text\"\n        style:top=\"0\"\n        style:text-align={labelPosition === 'even' ? 'right' : 'left'}\n        style:width=\"{widestTickLen}px\"\n        style:left=\"{-widestTickLen - tickGutter - (labelPosition === 'even' ? tickLen : 0)}px\"\n        style:transform=\"translate({dx + (labelPosition === 'even' ? -3 : 0)}px, calc(-50% + {dy +\n          (labelPosition === 'above' ||\n          (snapBaselineLabel === true && tickValUnits === maxTickValUnits)\n            ? -3\n            : 4)}px))\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n    width: 100%;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}],"jsons":[]}