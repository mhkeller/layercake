{"main":{"slug":"AxisYRight.svelte","contents":"<!--\n  @component\n  Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, width } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='above'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. */\n  export let labelPosition = 'above';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=5] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 5;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x2 = $width + tickGutter + (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: y = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValPx = Math.max(...tickVals.map($yScale));\n</script>\n\n<g class=\"axis y-axis\">\n  {#each tickVals as tick (tick)}\n    {@const tickValPx = $yScale(tick)}\n    <g class=\"tick tick-{tick}\" transform=\"translate({$xRange[0]}, {tickValPx})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" x1=\"0\" {x2} y1={y} y2={y}></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          x1={$width + tickGutter}\n          x2={$width + tickGutter + tickLen}\n          y1={y}\n          y2={y}\n        ></line>\n      {/if}\n\n      <text\n        x={$width + tickGutter + (labelPosition === 'even' ? tickLen : 0)}\n        {y}\n        dx={dx + (labelPosition === 'even' ? 3 : 0)}\n        dy={dy +\n          (labelPosition === 'above' || (snapBaselineLabel === true && tickValPx === maxTickValPx)\n            ? -3\n            : 4)}>{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"Show marks next to the tick label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"tickMarks","default":"false"},{"title":"param","description":"Whether the label sits even with its value ('even') or sits on top ('above') the tick mark.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"labelPosition","default":"'above'"},{"title":"param","description":"When labelPosition='even', adjust the lowest label so that it sits above the tick mark.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"snapBaselineLabel","default":"false"},{"title":"param","description":"When labelPosition='even', adjust the lowest label so that it sits above the tick mark.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"gridlines","default":"true"},{"title":"param","description":"The length of the tick mark. If not set, becomes the length of the widest tick.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"tickMarkLength","default":"undefined"},{"title":"param","description":"A function that passes the current tick value and expects a nicely formatted value in return.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"format","default":"d=>d"},{"title":"param","description":"If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Number"},{"type":"NameExpression","name":"Array"},{"type":"NameExpression","name":"Function"}]}},"name":"ticks","default":"4"},{"title":"param","description":"The amount of whitespace between the start of the tick and the chart drawing area (the xRange min).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"tickGutter","default":"5"},{"title":"param","description":"Any optional value passed to the `dx` attribute on the text label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dx","default":"0"},{"title":"param","description":"Any optional value passed to the `dy` attribute on the text label.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dy","default":"0"},{"title":"param","description":"Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value).","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"charPixelWidth","default":"7.25"}]},"componentDescription":"Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.","modules":[]}