{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg, calcExtents } from 'layercake';\n  import { timeDay } from 'd3-time';\n  import { scaleBand, scaleTime } from 'd3-scale';\n\n  import ScatterSvg from './_components/Scatter.svg.svelte';\n  import AxisX from './_components/AxisX.svelte';\n  import AxisY from './_components/AxisY.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/days.csv';\n\n  const xKey = 'seconds';\n  const yKey = 'day';\n\n  const r = 4;\n\n  const daysTransformed = data.map(d => {\n    const parts = d.timestring.split('T');\n    const time = parts[1]\n      .replace('Z', '')\n      .split(':')\n      .map(q => +q);\n    d[xKey] = time[0] * 60 * 60 + time[1] * 60 + time[2];\n    d[yKey] = parts[0];\n    return d;\n  });\n\n  /* --------------------------------------------\n   * Generate a range of days in between the min and max\n   * in case we are missing any in our data so we can show empty days for them\n   */\n  const extents = calcExtents(daysTransformed, {\n    x: d => d.timestring\n  });\n\n  // Convert to string even though it is one to make Typescript happy\n  const minDate = extents.x[0]\n    .toString()\n    .split('T')[0]\n    .split('-')\n    .map(d => +d);\n  const maxDate = extents.x[1]\n    .toString()\n    .split('T')[0]\n    .split('-')\n    .map(d => +d);\n\n  const allDays = timeDay\n    .range(\n      new Date(Date.UTC(minDate[0], minDate[1] - 1, minDate[2])),\n      new Date(Date.UTC(maxDate[0], maxDate[1] - 1, maxDate[2] + 1))\n    )\n    .map(d => d.toISOString().split('T')[0])\n    .sort();\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 0, right: 15, bottom: 20, left: 75 }}\n    x={xKey}\n    y={yKey}\n    xDomain={[0, 24 * 60 * 60]}\n    yDomain={allDays}\n    xScale={scaleTime()}\n    yScale={scaleBand().paddingInner(0.05).round(true)}\n    data={daysTransformed}\n  >\n    <Svg>\n      <AxisX\n        ticks={[0, 4, 8, 12, 16, 20, 24].map(d => d * 60 * 60)}\n        format={d => `${Math.floor(d / 60 / 60)}:00`}\n      />\n      <AxisY />\n      <ScatterSvg {r} fill=\"rgba(255, 204, 0, 0.75)\" />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>"},"dek":"A scatter plot with an `scaleBand` for the y-scale to bucket them by day and a `scaleTime` for the x-scale. The only real fancy part of this plot is modifying the input data to be in \"seconds since start of day\" and generating the `yDomain` as _every_ day between the min and max values, not just days for which we have values. This lets us see days in between that have no data.\n","components":[{"title":"./_components/Scatter.svg.svelte","contents":"<!--\n  @component\n  Generates an SVG scatter plot. This component can also work if the x- or y-scale is ordinal, i.e. it has a `.bandwidth` method. See the [timeplot chart](https://layercake.graphics/example/Timeplot) for an example.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n\n  /** @type {Number} [r=5] – The circle's radius. */\n  export let r = 5;\n\n  /** @type {String} [fill='#0cf'] – The circle's fill color. */\n  export let fill = '#0cf';\n\n  /** @type {String} [stroke='#000'] – The circle's stroke color. */\n  export let stroke = '#000';\n\n  /** @type {Number} [strokeWidth=0] – The circle's stroke width. */\n  export let strokeWidth = 0;\n</script>\n\n<g class=\"scatter-group\">\n  {#each $data as d}\n    <circle\n      cx={$xGet(d) + ($xScale.bandwidth ? $xScale.bandwidth() / 2 : 0)}\n      cy={$yGet(d) + ($yScale.bandwidth ? $yScale.bandwidth() / 2 : 0)}\n      {r}\n      {fill}\n      {stroke}\n      stroke-width={strokeWidth}\n    />\n  {/each}\n</g>"},{"title":"./_components/AxisX.svelte","contents":"<!--\n  @component\n  Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] – Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=12] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 12;\n\n  function textAnchor(i, sl) {\n    if (sl === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<g class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {#if baseline === true}\n      <line class=\"baseline\" y1={$height} y2={$height} x1=\"0\" x2={$width} />\n    {/if}\n\n    <g class=\"tick tick-{i}\" transform=\"translate({$xScale(tick)},{Math.max(...$yRange)})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" x1={halfBand} x2={halfBand} y1={-$height} y2=\"0\" />\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          x1={halfBand}\n          x2={halfBand}\n          y1={tickGutter}\n          y2={tickGutter + tickLen}\n        />\n      {/if}\n      <text x={halfBand} y={tickGutter + tickLen} {dx} {dy} text-anchor={textAnchor(i, snapLabels)}\n        >{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapLabels .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapLabels .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./_components/AxisY.svelte","contents":"<!--\n  @component\n  Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, width } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: y = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValPx = Math.max(...tickVals.map($yScale));\n</script>\n\n<g class=\"axis y-axis\">\n  {#each tickVals as tick (tick)}\n    {@const tickValPx = $yScale(tick)}\n    <g class=\"tick tick-{tick}\" transform=\"translate({$xRange[0]}, {tickValPx})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" {x1} x2={$width} y1={y} y2={y}></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" {x1} x2={x1 + tickLen} y1={y} y2={y}></line>\n      {/if}\n      <text\n        x={x1}\n        {y}\n        dx={dx + (labelPosition === 'even' ? -3 : 0)}\n        text-anchor={labelPosition === 'above' ? 'start' : 'end'}\n        dy={dy +\n          (labelPosition === 'above' || (snapBaselineLabel === true && tickValPx === maxTickValPx)\n            ? -3\n            : 4)}>{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/days.csv","contents":"timestring\n2018-07-22T22:25:55Z\n2018-07-22T19:35:29Z\n2018-07-22T18:54:42Z\n2018-07-22T02:05:59Z\n2018-07-22T00:55:02Z\n2018-07-22T00:53:00Z\n2018-07-22T23:32:37Z\n2018-07-22T17:52:55Z\n2018-07-22T17:52:01Z\n2018-07-22T17:32:21Z\n2018-07-22T16:38:22Z\n2018-07-22T16:38:20Z\n2018-07-22T21:07:28Z\n2018-07-22T01:36:47Z\n2018-07-22T01:00:04Z\n2018-07-22T20:15:35Z\n2018-07-23T03:05:05Z\n2018-07-23T02:56:18Z\n2018-07-23T02:11:53Z\n2018-07-23T02:08:49Z\n2018-07-23T02:02:14Z\n2018-07-23T04:13:29Z\n2018-07-23T03:24:58Z\n2018-07-23T03:23:55Z\n2018-07-23T03:22:02Z\n2018-07-23T18:37:05Z\n2018-07-23T01:34:48Z\n2018-07-23T01:11:38Z\n2018-07-23T01:02:25Z\n2018-07-23T23:32:07Z\n2018-07-23T18:26:04Z\n2018-07-24T18:25:35Z\n2018-07-24T02:56:28Z\n2018-07-24T16:33:57Z\n2018-07-24T15:52:16Z\n2018-07-24T20:31:12Z\n2018-07-24T20:27:11Z\n2018-07-24T14:17:18Z\n2018-07-24T03:49:28Z\n2018-07-24T03:42:33Z\n2018-07-24T03:20:45Z\n2018-07-24T01:47:25Z\n2018-07-24T01:26:16Z\n2018-07-24T01:16:55Z\n2018-07-25T00:50:15Z\n2018-07-25T19:16:21Z\n2018-07-25T02:38:15Z\n2018-07-25T01:03:55Z\n2018-07-25T01:00:55Z\n2018-07-25T00:59:31Z\n2018-07-25T19:06:36Z\n2018-07-25T19:03:18Z\n2018-07-25T01:05:50Z\n2018-07-25T23:43:32Z\n2018-07-25T17:39:53Z\n2018-07-25T17:37:15Z\n2018-07-25T15:50:12Z\n2018-07-25T03:47:16Z\n2018-07-25T03:06:21Z\n2018-07-25T02:59:34Z\n2018-07-25T20:53:53Z\n2018-07-25T01:37:58Z\n2018-07-25T01:32:23Z\n2018-07-25T01:30:09Z\n2018-07-25T17:03:39Z\n2018-07-25T16:00:39Z\n2018-07-25T15:59:44Z\n2018-07-25T22:29:55Z\n2018-07-25T02:59:41Z\n2018-07-25T02:58:36Z\n2018-07-25T02:56:41Z\n2018-07-25T02:21:56Z\n2018-07-25T02:20:27Z\n2018-07-25T02:15:25Z\n2018-07-25T02:22:38Z\n2018-07-25T02:19:25Z\n2018-07-25T22:48:50Z\n2018-07-25T06:52:20Z\n2018-07-25T06:45:09Z\n2018-07-25T21:18:11Z\n2018-07-25T17:35:37Z\n2018-07-25T01:52:56Z\n2018-07-25T01:07:36Z\n2018-07-25T01:05:37Z\n2018-07-25T01:05:27Z\n2018-07-25T17:24:44Z\n2018-07-25T15:53:26Z\n2018-07-25T15:32:59Z\n2018-07-25T17:33:38Z\n2018-07-25T15:28:30Z\n2018-07-25T15:16:40Z\n2018-07-28T15:07:48Z\n2018-07-28T13:56:38Z\n2018-07-28T04:46:00Z\n2018-07-28T04:19:46Z\n2018-07-28T04:18:59Z\n2018-07-28T04:14:41Z\n2018-07-28T03:54:01Z\n2018-07-28T03:53:10Z\n2018-07-28T02:28:02Z\n2018-07-28T17:41:43Z\n2018-07-28T04:42:10Z\n2018-07-28T04:40:23Z\n2018-07-28T04:40:10Z\n2018-07-28T01:31:38Z\n2018-07-28T00:23:02Z\n2018-07-28T18:17:10Z\n2018-07-28T18:08:21Z\n2018-07-28T15:29:46Z\n2018-07-28T15:15:33Z\n2018-07-28T04:54:39Z\n2018-07-28T04:27:48Z\n2018-07-28T04:24:37Z\n2018-07-28T04:08:45Z\n2018-07-28T03:53:50Z\n2018-07-28T03:42:23Z\n2018-07-28T19:03:27Z\n2018-07-28T00:32:39Z\n2018-07-28T00:32:32Z\n2018-07-28T02:57:20Z\n2018-07-28T02:54:40Z\n2018-07-28T04:28:23Z\n2018-07-28T02:19:41Z\n2018-07-28T00:50:51Z\n2018-07-28T00:40:52Z\n2018-07-28T21:54:06Z\n2018-07-28T21:53:09Z\n2018-07-28T19:09:30Z\n2018-07-28T18:55:04Z\n2018-07-28T18:51:44Z\n2018-07-28T17:24:28Z\n2018-07-28T02:31:18Z\n2018-07-28T04:20:20Z\n2018-07-28T04:19:13Z\n2018-07-28T04:16:31Z"}],"jsons":[]}