{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import { scaleOrdinal, scaleBand } from 'd3-scale';\n\n  import ForceLayout from './_components/CirclePackForce.svelte';\n\n  import data from './_data/dots.json';\n\n  const xKey = 'category';\n  const rKey = 'value';\n  const zKey = 'category';\n\n  let groupBy = 'true';\n\n  const seriesColors = ['#f0c', '#0cf', '#fc0'];\n\n  let manyBodyStrength = 3;\n  let xStrength = 0.1;\n</script>\n\n<div class=\"input-container\">\n  <label><input type=\"radio\" bind:group={groupBy} value=\"true\" />Group by category</label>\n  <label><input type=\"radio\" bind:group={groupBy} value=\"false\" />Clump together</label>\n</div>\n\n<div class=\"chart-container\">\n  <LayerCake\n    {data}\n    x={xKey}\n    r={rKey}\n    z={zKey}\n    xScale={scaleBand()}\n    rRange={[3, 12]}\n    zScale={scaleOrdinal()}\n    zRange={seriesColors}\n  >\n    <Svg>\n      <ForceLayout {manyBodyStrength} {xStrength} groupBy={JSON.parse(groupBy)} nodeStroke=\"#000\" />\n    </Svg>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n  label {\n    cursor: pointer;\n  }\n  input {\n    margin-right: 7px;\n  }\n</style>"},"dek":"A Circle Pack chart using a D3 force layout with a technique from <a href=\"https://twitter.com/plmrry\" target=\"_blank\" rel=\"noreferrer\">@plmrry</a>. For another way of doing a D3 force layout, see the <a href=\"/example/BeeswarmForce\" target=\"_blank\" rel=\"noreferrer\">Beeswarm Force example</a>.\n","components":[{"title":"./_components/CirclePackForce.svelte","contents":"<!--\n  @component\n  Generates an SVG force simulation using [d3-force](https://github.com/d3/d3-force). The values here are defaults which you will likely have to customize because every force simulation is different. This technique comes from @plmrry.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { forceSimulation, forceX, forceManyBody, forceCollide, forceCenter } from 'd3-force';\n\n  const { data, width, height, xScale, xGet, rGet, zGet } = getContext('LayerCake');\n\n  /** @type {Number} [manyBodyStrength=5] - The value passed into the `.strength` method on `forceManyBody`, which is used as the `'charge'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#manyBody_strength) for more. */\n  export let manyBodyStrength = 5;\n\n  /** @type {Number} [xStrength=0.1] - The value passed into the `.strength` method on `forceX`, which is used as the `'x'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#x_strength) for more. */\n  export let xStrength = 0.1;\n\n  /** @type {String|undefined} [nodeColor] Set a color manually otherwise it will default to the `zScale`. */\n  export let nodeColor = undefined;\n\n  /** @type {String} [nodeStroke='#fff'] - The circle's stroke color. */\n  export let nodeStroke = '#fff';\n\n  /** @type {Number} [nodeStrokeWidth=1] - The circle's stroke width, in pixels. */\n  export let nodeStrokeWidth = 1;\n\n  /** @type {Boolean} [groupBy=true] - Group the nodes by the return value of the x-scale. If `false`, align all the nodes to the canvas center. */\n  export let groupBy = true;\n\n  /* --------------------------------------------\n   * Make a copy because the simulation will alter the objects\n   */\n  const initialNodes = $data.map(d => ({ ...d }));\n\n  const simulation = forceSimulation(initialNodes);\n\n  let nodes = [];\n\n  simulation.on('tick', () => {\n    nodes = simulation.nodes();\n  });\n\n  /* ----------------------------------------------\n   * When variables change, set forces and restart the simulation\n   */\n  $: {\n    simulation\n      .force(\n        'x',\n        forceX()\n          .x(d => {\n            return groupBy === true ? $xGet(d) + $xScale.bandwidth() / 2 : $width / 2;\n          })\n          .strength(xStrength)\n      )\n      .force('center', forceCenter($width / 2, $height / 2))\n      .force('charge', forceManyBody().strength(manyBodyStrength))\n      .force(\n        'collision',\n        forceCollide().radius(d => {\n          return $rGet(d) + nodeStrokeWidth / 2; // Divide this by two because an svg stroke is drawn halfway out\n        })\n      )\n      .force('center', forceCenter($width / 2, $height / 2))\n      .alpha(1)\n      .restart();\n  }\n</script>\n\n{#each nodes as point}\n  <circle\n    class=\"node\"\n    r={$rGet(point)}\n    fill={nodeColor || $zGet(point)}\n    stroke={nodeStroke}\n    stroke-width={nodeStrokeWidth}\n    cx={point.x}\n    cy={point.y}\n  >\n    <!-- <title>{point[$custom.title]}</title> -->\n  </circle>\n{/each}"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[],"jsons":[{"title":"./_data/dots.json","contents":"[\n  { \"category\": \"a\", \"value\": 0 },\n  { \"category\": \"a\", \"value\": 2 },\n  { \"category\": \"a\", \"value\": 5 },\n  { \"category\": \"a\", \"value\": 23 },\n  { \"category\": \"a\", \"value\": 12 },\n  { \"category\": \"a\", \"value\": 50 },\n  { \"category\": \"a\", \"value\": 7 },\n  { \"category\": \"a\", \"value\": 20 },\n  { \"category\": \"a\", \"value\": 15 },\n  { \"category\": \"a\", \"value\": 30 },\n  { \"category\": \"a\", \"value\": 2 },\n  { \"category\": \"b\", \"value\": 10 },\n  { \"category\": \"b\", \"value\": 12 },\n  { \"category\": \"b\", \"value\": 15 },\n  { \"category\": \"b\", \"value\": 3 },\n  { \"category\": \"b\", \"value\": 2 },\n  { \"category\": \"b\", \"value\": 5 },\n  { \"category\": \"b\", \"value\": 35 },\n  { \"category\": \"b\", \"value\": 2 },\n  { \"category\": \"b\", \"value\": 5 },\n  { \"category\": \"b\", \"value\": 20 },\n  { \"category\": \"b\", \"value\": 12 },\n  { \"category\": \"c\", \"value\": 5 },\n  { \"category\": \"c\", \"value\": 4 },\n  { \"category\": \"c\", \"value\": 2 },\n  { \"category\": \"c\", \"value\": 32 },\n  { \"category\": \"c\", \"value\": 25 },\n  { \"category\": \"c\", \"value\": 40 },\n  { \"category\": \"c\", \"value\": 35 },\n  { \"category\": \"c\", \"value\": 25 },\n  { \"category\": \"c\", \"value\": 19 },\n  { \"category\": \"c\", \"value\": 25 },\n  { \"category\": \"c\", \"value\": 10 }\n]"}]}