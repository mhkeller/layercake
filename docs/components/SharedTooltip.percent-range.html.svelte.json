{"main":{"slug":"SharedTooltip.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates a tooltip that works on multiseries datasets, like multiline charts. It creates a tooltip showing the name of the series and the current value. This version uses percentages so you can use it to render server-side. It finds the nearest data point using the [QuadTree.percent-range.html.svelte](https://layercake.graphics/components/QuadTree.percent-range.html.svelte) component.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { format } from 'd3-format';\n\n  import QuadTree from './QuadTree.percent-range.html.svelte';\n\n  const { data, width, yScale, config } = getContext('LayerCake');\n\n  const commas = format(',');\n  const titleCase = d => d.replace(/^\\w/, w => w.toUpperCase());\n\n  /** @type {Function} [formatTitle=d => d] - A function to format the tooltip title, which is `$config.x`. */\n  export let formatTitle = d => d;\n\n  /** @type {Function} [formatKey=d => titleCase(d)] - A function to format the series name. */\n  export let formatKey = d => titleCase(d);\n\n  /** @type {Function} [formatValue=d => isNaN(+d) ? d : commas(d)] - A function to format the value. */\n  export let formatValue = d => (isNaN(+d) ? d : commas(d));\n\n  /** @type {Number} [offset=-20] - A y-offset from the hover point, in pixels. */\n  export let offset = -20;\n\n  /** @type {Array<Object>|undefined} [dataset] - The dataset to work off of—defaults to $data if left unset. You can pass something custom in here in case you don't want to use the main data or it's in a strange format. */\n  export let dataset = undefined;\n\n  const w = 150;\n  const w2 = w / 2;\n\n  /* --------------------------------------------\n   * Sort the keys by the highest value\n   */\n  function sortResult(result) {\n    if (Object.keys(result).length === 0) return [];\n    const rows = Object.keys(result)\n      .filter(d => d !== $config.x)\n      .map(key => {\n        return {\n          key,\n          value: result[key]\n        };\n      })\n      .sort((a, b) => b.value - a.value);\n\n    return rows;\n  }\n</script>\n\n<QuadTree dataset={dataset || $data} y=\"x\" let:x let:y let:visible let:found let:e>\n  {@const foundSorted = sortResult(found)}\n  {#if visible === true}\n    <div style=\"left:{(x / 100) * $width}px;\" class=\"line\"></div>\n    <div\n      class=\"tooltip\"\n      style=\"\n        width:{w}px;\n        display: {visible ? 'block' : 'none'};\n        top:calc({$yScale(foundSorted[0].value)}% + {offset}px);\n        left:{Math.min(Math.max(w2, (x / 100) * $width), $width - w2)}px;\"\n    >\n      <div class=\"title\">{formatTitle(found[$config.x])}</div>\n      {#each foundSorted as row}\n        <div class=\"row\">\n          <span class=\"key\">{formatKey(row.key)}:</span>\n          {formatValue(row.value)}\n        </div>\n      {/each}\n    </div>\n  {/if}\n</QuadTree>\n\n<style>\n  .tooltip {\n    position: absolute;\n    font-size: 13px;\n    pointer-events: none;\n    border: 1px solid #ccc;\n    background: rgba(255, 255, 255, 0.85);\n    transform: translate(-50%, -100%);\n    padding: 5px;\n    z-index: 15;\n  }\n  .line {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    border-left: 1px dotted #666;\n    pointer-events: none;\n  }\n  .tooltip,\n  .line {\n    transition:\n      left 250ms ease-out,\n      top 250ms ease-out;\n  }\n  .title {\n    font-weight: bold;\n  }\n  .key {\n    color: #999;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":["/example-ssr/MultiLine"]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"A function to format the tooltip title, which is `$config.x`.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatTitle","default":"d=>d"},{"title":"param","description":"A function to format the series name.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatKey","default":"d=>titleCase(d)"},{"title":"param","description":"A function to format the value.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatValue","default":"d=>isNaN(+d)?d:commas(d)"},{"title":"param","description":"A y-offset from the hover point, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"offset","default":"-20"},{"title":"param","description":"The dataset to work off of—defaults to $data if left unset. You can pass something custom in here in case you don't want to use the main data or it's in a strange format.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]},{"type":"UndefinedLiteral"}]}},"name":"dataset"}]},"componentDescription":"Generates a tooltip that works on multiseries datasets, like multiline charts. It creates a tooltip showing the name of the series and the current value. This version uses percentages so you can use it to render server-side. It finds the nearest data point using the [QuadTree.percent-range.html.svelte](https://layercake.graphics/components/QuadTree.percent-range.html.svelte) component.","modules":[]}