{"main":{"slug":"Map.svg.svelte","contents":"<!--\n  @component\n  Generates an SVG map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).\n -->\n<script>\n  import { getContext, createEventDispatcher } from 'svelte';\n  import { geoPath } from 'd3-geo';\n  import { raise } from 'layercake';\n\n  const { data, width, height, zGet } = getContext('LayerCake');\n\n  /** @type {Function} projection - A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`. */\n  export let projection;\n\n  /** @type {number|undefined} [fixedAspectRatio] - By default, the map fills to fit the $width and $height. If instead you want a fixed-aspect ratio, like for a server-side rendered map, set that here. */\n  export let fixedAspectRatio = undefined;\n\n  /** @type {string|undefined} [fill] - The shape's fill color. By default, the fill will be determined by the z-scale, unless this prop is set. */\n  export let fill = undefined;\n\n  /** @type {string} [stroke='#333'] - The shape's stroke color. */\n  export let stroke = '#333';\n\n  /** @type {number} [strokeWidth=0.5] - The shape's stroke width. */\n  export let strokeWidth = 0.5;\n\n  /** @type {Array<Object>|undefined} [features] - A list of GeoJSON features. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data.features` if left unset. */\n  export let features = undefined;\n\n  /* --------------------------------------------\n   * Here's how you would do cross-component hovers\n   */\n  const dispatch = createEventDispatcher();\n\n  $: fitSizeRange = fixedAspectRatio ? [100, 100 / fixedAspectRatio] : [$width, $height];\n\n  $: projectionFn = projection().fitSize(fitSizeRange, $data);\n\n  $: geoPathFn = geoPath(projectionFn);\n\n  function handleMousemove(feature) {\n    return function handleMousemoveFn(e) {\n      raise(this);\n      // When the element gets raised, it flashes 0,0 for a second so skip that\n      if (e.layerX !== 0 && e.layerY !== 0) {\n        dispatch('mousemove', { e, props: feature.properties });\n      }\n    };\n  }\n</script>\n\n<g\n  class=\"map-group\"\n  on:mouseout={() => dispatch('mouseout')}\n  on:blur={() => dispatch('mouseout')}\n  role=\"tooltip\"\n>\n  {#each features || $data.features as feature}\n    <!-- svelte-ignore a11y_mouse_events_have_key_events -->\n    <path\n      class=\"feature-path\"\n      fill={fill || $zGet(feature.properties)}\n      {stroke}\n      stroke-width={strokeWidth}\n      d={geoPathFn(feature)}\n      on:mouseover={e => {\n        dispatch('mousemove', { e, props: feature.properties });\n        // You can't set :hover when using `raise` in Firefox. See: https://github.com/mhkeller/layercake/issues/278\n        e.target.classList.add('hovered');\n      }}\n      on:mousemove={handleMousemove(feature)}\n      on:mouseout={e => {\n        e.target.classList.remove('hovered');\n      }}\n      role=\"tooltip\"\n    ></path>\n  {/each}\n</g>\n\n<style>\n  /* .feature-path {\n    stroke: #333;\n    stroke-width: 0.5px;\n  } */\n  .map-group :global(.feature-path.hovered) {\n    stroke: #000;\n    stroke-width: 2px;\n  }\n  /**\n   * Disable the outline on feature click.\n   * Depending on map functionality and accessiblity issues,\n   * you may not want this rule. Read more:\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/:focus\n   * https://github.com/mhkeller/layercake/issues/63\n   */\n  .feature-path:focus {\n    outline: none;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/MapLayered","/example/MapSvg"]},{"group":"SSR","matches":["/example-ssr/MapLayered","/example-ssr/MapSvg"]}],"hasjsDoctable":true,"jsdocParsed":[{"kind":"type","type":"Function","name":"projection","required":true,"defaultValue":null,"description":"A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`."},{"kind":"type","type":"number|undefined","name":"fixedAspectRatio","required":false,"defaultValue":null,"description":"By default, the map fills to fit the $width and $height. If instead you want a fixed-aspect ratio, like for a server-side rendered map, set that here."},{"kind":"type","type":"string|undefined","name":"fill","required":false,"defaultValue":null,"description":"The shape's fill color. By default, the fill will be determined by the z-scale, unless this prop is set."},{"kind":"type","type":"string","name":"stroke","required":false,"defaultValue":"'#333'","description":"The shape's stroke color."},{"kind":"type","type":"number","name":"strokeWidth","required":false,"defaultValue":"0.5","description":"The shape's stroke width."},{"kind":"type","type":"Array<Object>|undefined","name":"features","required":false,"defaultValue":null,"description":"A list of GeoJSON features. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data.features` if left unset."}],"componentDescription":"\n  Generates an SVG map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).\n \n","modules":[]}