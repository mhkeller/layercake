{"main":{"title":"+page.svelte","contents":"<script>\n  import SyncedBrushWrapper from './_components/SyncedBrushWrapper.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import pointsOne from './_data/points.csv';\n  import pointsTwo from './_data/pointsTwo.csv';\n  import pointsThree from './_data/pointsThree.csv';\n  import pointsFour from './_data/pointsFour.csv';\n\n  let brushExtents = [null, null];\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  const datasets = [pointsOne, pointsTwo, pointsThree, pointsFour];\n\n  datasets.forEach(dataset => {\n    dataset.forEach(d => {\n      d[yKey] = +d[yKey];\n    });\n  });\n\n  const colors = ['#00e047', '#00bbff', '#ff00cc', '#ffcc00'];\n</script>\n\n<div class=\"chart-container\">\n  {#each datasets as dataset, i}\n    <SyncedBrushWrapper\n      data={dataset}\n      {xKey}\n      {yKey}\n      bind:min={brushExtents[0]}\n      bind:max={brushExtents[1]}\n      stroke={colors[i]}\n    />\n  {/each}\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-content: space-between;\n  }\n</style>"},"dek":"","components":[{"title":"./_components/SyncedBrushWrapper.svelte","contents":"<script>\n  import { LayerCake, Svg, Html } from 'layercake';\n\n  import Line from './Line.svelte';\n  import Area from './Area.svelte';\n  import AxisX from './AxisX.svelte';\n  import AxisY from './AxisY.svelte';\n  import Brush from './Brush.html.svelte';\n\n  export let min = null;\n  export let max = null;\n  export let xKey = 'x';\n  export let yKey = 'y';\n  export let data = [];\n  export let stroke = '#00e047';\n\n  let brushedData;\n  $: {\n    brushedData = data.slice((min || 0) * data.length, (max || 1) * data.length);\n    if (brushedData.length < 2) {\n      brushedData = data.slice(min * data.length, min * data.length + 2);\n    }\n  }\n</script>\n\n<div class=\"chart-wrapper\">\n  <div class=\"chart-container\">\n    <LayerCake\n      padding={{ bottom: 20, left: 25 }}\n      x={xKey}\n      y={yKey}\n      yDomain={[0, null]}\n      data={brushedData}\n    >\n      <Svg>\n        <AxisX\n          ticks={ticks => {\n            const filtered = ticks.filter(t => t % 1 === 0);\n            if (filtered.length > 7) {\n              return filtered.filter((t, i) => i % 2 === 0);\n            }\n            return filtered;\n          }}\n        />\n        <AxisY ticks={2} />\n        <Line {stroke} />\n        <Area fill={`${stroke}10`} />\n      </Svg>\n    </LayerCake>\n  </div>\n\n  <div class=\"brush-container\">\n    <LayerCake padding={{ top: 5 }} x={xKey} y={yKey} yDomain={[0, null]} {data}>\n      <Svg>\n        <Line {stroke} />\n        <Area fill={`${stroke}10`} />\n      </Svg>\n      <Html>\n        <Brush bind:min bind:max />\n      </Html>\n    </LayerCake>\n  </div>\n</div>\n\n<style>\n  .chart-wrapper {\n    width: 48%;\n    height: 40%;\n  }\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 80%;\n  }\n  .brush-container {\n    width: 100%;\n    height: 20%;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[{"title":"./_components/Line.svelte","contents":"<!--\n  @component\n  Generates an SVG line shape.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  /** @type {String} [stroke='#ab00d6'] - The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let stroke = '#ab00d6';\n\n  $: path =\n    'M' +\n    $data\n      .map(d => {\n        return $xGet(d) + ',' + $yGet(d);\n      })\n      .join('L');\n</script>\n\n<path class=\"path-line\" d={path} {stroke}></path>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./_components/Area.svelte","contents":"<!--\n  @component\n  Generates an SVG area shape.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale, extents } = getContext('LayerCake');\n\n  /**  @type {String} [fill='#ab00d610'] The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color. */\n  export let fill = '#ab00d610';\n\n  $: path =\n    'M' +\n    $data\n      .map(d => {\n        return $xGet(d) + ',' + $yGet(d);\n      })\n      .join('L');\n\n  /**  @type {String} **/\n  let area;\n\n  $: {\n    const yRange = $yScale.range();\n    area =\n      path +\n      ('L' +\n        $xScale($extents.x ? $extents.x[1] : 0) +\n        ',' +\n        yRange[0] +\n        'L' +\n        $xScale($extents.x ? $extents.x[0] : 0) +\n        ',' +\n        yRange[0] +\n        'Z');\n  }\n</script>\n\n<path class=\"path-area\" d={area} {fill}></path>"},{"title":"./_components/AxisX.svelte","contents":"<!--\n  @component\n  Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=12] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 12;\n\n  function textAnchor(i, sl) {\n    if (sl === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<g class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {#if baseline === true}\n      <line class=\"baseline\" y1={$height} y2={$height} x1=\"0\" x2={$width} />\n    {/if}\n\n    <g class=\"tick tick-{i}\" transform=\"translate({$xScale(tick)},{Math.max(...$yRange)})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" x1={halfBand} x2={halfBand} y1={-$height} y2=\"0\" />\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          x1={halfBand}\n          x2={halfBand}\n          y1={tickGutter}\n          y2={tickGutter + tickLen}\n        />\n      {/if}\n      <text x={halfBand} y={tickGutter + tickLen} {dx} {dy} text-anchor={textAnchor(i, snapLabels)}\n        >{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapLabels .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapLabels .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./_components/AxisY.svelte","contents":"<!--\n  @component\n  Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, width } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: y = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValPx = Math.max(...tickVals.map($yScale));\n</script>\n\n<g class=\"axis y-axis\">\n  {#each tickVals as tick (tick)}\n    {@const tickValPx = $yScale(tick)}\n    <g class=\"tick tick-{tick}\" transform=\"translate({$xRange[0]}, {tickValPx})\">\n      {#if gridlines === true}\n        <line class=\"gridline\" {x1} x2={$width} y1={y} y2={y}></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" {x1} x2={x1 + tickLen} y1={y} y2={y}></line>\n      {/if}\n      <text\n        x={x1}\n        {y}\n        dx={dx + (labelPosition === 'even' ? -3 : 0)}\n        text-anchor={labelPosition === 'above' ? 'start' : 'end'}\n        dy={dy +\n          (labelPosition === 'above' || (snapBaselineLabel === true && tickValPx === maxTickValPx)\n            ? -3\n            : 4)}>{format(tick)}</text\n      >\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: 11px;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./_components/Brush.html.svelte","contents":"<!--\n  @component\n  Adds a brush component to create a range between 0 and 1. Bind to the `min` and `max` props to use them in other components. See the [brushable example](https://layercake.graphcics/example/Brush) for use.\n -->\n<script>\n  import { clamp } from 'yootils';\n\n  /** @type {Number} min - The brush's min value. Useful to bind to. */\n  export let min;\n\n  /** @type {Number} max - The brush's max value. Useful to bind to. */\n  export let max;\n\n  let brush;\n\n  const p = x => {\n    const { left, right } = brush.getBoundingClientRect();\n    return clamp((x - left) / (right - left), 0, 1);\n  };\n\n  const handler = fn => {\n    return e => {\n      if (e.type === 'touchstart') {\n        if (e.touches.length !== 1) return;\n        e = e.touches[0];\n      }\n\n      const id = e.identifier;\n      const start = { min, max, p: p(e.clientX) };\n\n      const handle_move = e => {\n        if (e.type === 'touchmove') {\n          if (e.changedTouches.length !== 1) return;\n          e = e.changedTouches[0];\n          if (e.identifier !== id) return;\n        }\n\n        fn(start, p(e.clientX));\n      };\n\n      const handle_end = e => {\n        if (e.type === 'touchend') {\n          if (e.changedTouches.length !== 1) return;\n          if (e.changedTouches[0].identifier !== id) return;\n        } else if (e.target === brush) {\n          clear();\n        }\n\n        window.removeEventListener('mousemove', handle_move);\n        window.removeEventListener('mouseup', handle_end);\n\n        window.removeEventListener('touchmove', handle_move);\n        window.removeEventListener('touchend', handle_end);\n      };\n\n      window.addEventListener('mousemove', handle_move);\n      window.addEventListener('mouseup', handle_end);\n\n      window.addEventListener('touchmove', handle_move);\n      window.addEventListener('touchend', handle_end);\n    };\n  };\n\n  const clear = () => {\n    min = null;\n    max = null;\n  };\n\n  const reset = handler((start, p) => {\n    min = clamp(Math.min(start.p, p), 0, 1);\n    max = clamp(Math.max(start.p, p), 0, 1);\n  });\n\n  const move = handler((start, p) => {\n    const d = clamp(p - start.p, -start.min, 1 - start.max);\n    min = start.min + d;\n    max = start.max + d;\n  });\n\n  const adjust_min = handler((start, p) => {\n    min = p > start.max ? start.max : p;\n    max = p > start.max ? p : start.max;\n  });\n\n  const adjust_max = handler((start, p) => {\n    min = p < start.min ? p : start.min;\n    max = p < start.min ? start.min : p;\n  });\n\n  $: left = 100 * min;\n  $: right = 100 * (1 - max);\n</script>\n\n<div\n  bind:this={brush}\n  class=\"brush-outer\"\n  on:mousedown|stopPropagation={reset}\n  on:touchstart|stopPropagation={reset}\n  role=\"slider\"\n  aria-valuemin={min}\n  aria-valuemax={max}\n  aria-valuetext=\"{min} to {max}\"\n  tabindex=\"0\"\n>\n  {#if min !== null}\n    <div\n      class=\"brush-inner\"\n      on:mousedown|stopPropagation={move}\n      on:touchstart|stopPropagation={move}\n      style=\"left: {left}%; right: {right}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n    <div\n      class=\"brush-handle\"\n      on:mousedown|stopPropagation={adjust_min}\n      on:touchstart|stopPropagation={adjust_min}\n      style=\"left: {left}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n    <div\n      class=\"brush-handle\"\n      on:mousedown|stopPropagation={adjust_max}\n      on:touchstart|stopPropagation={adjust_max}\n      style=\"right: {right}%\"\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuetext=\"{min} to {max}\"\n      tabindex=\"0\"\n    ></div>\n  {/if}\n</div>\n\n<style>\n  .brush-outer {\n    position: relative;\n    width: 100%;\n    height: calc(100% + 5px);\n    top: -5px;\n  }\n\n  .brush-inner {\n    position: absolute;\n    height: 100%;\n    cursor: move;\n    /* mix-blend-mode: difference; */\n    background-color: #cccccc90;\n    /* border: 1px solid #000; */\n  }\n\n  .brush-handle {\n    position: absolute;\n    width: 0;\n    height: 100%;\n    cursor: ew-resize;\n  }\n\n  .brush-handle::before {\n    position: absolute;\n    content: '';\n    width: 8px;\n    left: -4px;\n    height: 100%;\n    background: transparent;\n  }\n</style>"}],"csvs":[{"title":"./_data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"},{"title":"./_data/pointsTwo.csv","contents":"myX,myY\n1979,5.03\n1980,3.99\n1981,10.35\n1982,4.06\n1983,10.11\n1984,11.66\n1985,5.95\n1986,7.27\n1987,2.77\n1988,3.43\n1989,6.49\n1990,8.27\n1991,3.85\n1992,6.21\n1993,0.14\n1994,7.65\n1995,5.57\n1996,15.61\n1997,12.42\n1998,5.2\n1999,9.81\n2000,8.64\n2001,10.07\n2002,1.71\n2003,3\n2004,11.82\n2005,4.74\n2006,4.25\n2007,0.16\n2008,7.97\n2009,9.75\n2010,3.34\n2011,3.46\n2012,1.73\n2013,5.97\n2014,2.17\n2015,0.88\n2016,8.19"},{"title":"./_data/pointsThree.csv","contents":"myX,myY\n1979,5.43\n1980,7.27\n1981,8.82\n1982,13.14\n1983,14.63\n1984,5.41\n1985,4.76\n1986,12.46\n1987,10.38\n1988,0.06\n1989,9.35\n1990,5.84\n1991,6.94\n1992,2.78\n1993,9.84\n1994,6.48\n1995,9.97\n1996,4.85\n1997,5.35\n1998,4.12\n1999,1.56\n2000,10.11\n2001,2.04\n2002,4.03\n2003,3.85\n2004,8.61\n2005,1.44\n2006,9.41\n2007,3.51\n2008,4.12\n2009,6.76\n2010,3.65\n2011,6.76\n2012,6.46\n2013,0.75\n2014,9.93\n2015,8.11\n2016,1.4"},{"title":"./_data/pointsFour.csv","contents":"myX,myY\n1979,10.27\n1980,1.99\n1981,2.25\n1982,3.56\n1983,0.32\n1984,4.18\n1985,1.75\n1986,2.35\n1987,2.54\n1988,6.53\n1989,5.02\n1990,3.4\n1991,4.79\n1992,1.29\n1993,12.65\n1994,5.26\n1995,3.11\n1996,14.92\n1997,13.21\n1998,10.34\n1999,5.02\n2000,9.11\n2001,13.24\n2002,8.02\n2003,1.54\n2004,0.25\n2005,6.02\n2006,5.91\n2007,6.83\n2008,6.76\n2009,3.7\n2010,2.3\n2011,3.37\n2012,4.02\n2013,2.15\n2014,2.33\n2015,5.98\n2016,6.27"}],"jsons":[]}