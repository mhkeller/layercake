{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, WebGL, Html } from 'layercake';\n\n  import ScatterWebGL from './_components/Scatter.webgl.svelte';\n  import AxisX from './_components/AxisX.percent-range.html.svelte';\n  import AxisY from './_components/AxisY.percent-range.html.svelte';\n  import QuadTree from './_components/QuadTree.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/points.csv';\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  const r = 3;\n  const xyPadding = 6;\n  const padding = { top: 5, right: 5, bottom: 20, left: 25 };\n\n  data.forEach(d => {\n    d[yKey] = +d[yKey];\n  });\n</script>\n\n<div class=\"chart-container\">\n  <LayerCake\n    position=\"absolute\"\n    ssr\n    percentRange\n    {padding}\n    x={xKey}\n    y={yKey}\n    xPadding={[xyPadding, xyPadding]}\n    yPadding={[xyPadding, xyPadding]}\n    {data}\n  >\n    <Html>\n      <AxisX />\n      <AxisY tickMarks={false} />\n    </Html>\n  </LayerCake>\n\n  <LayerCake\n    position=\"absolute\"\n    {padding}\n    x={xKey}\n    y={yKey}\n    xPadding={[xyPadding, xyPadding]}\n    yPadding={[xyPadding, xyPadding]}\n    {data}\n  >\n    <WebGL>\n      <ScatterWebGL {r} />\n    </WebGL>\n\n    <Html>\n      <QuadTree let:x let:y let:visible>\n        <div\n          class=\"circle\"\n          style=\"top:{y}px;left:{x}px;display: {visible ? 'block' : 'none'};\"\n        ></div>\n      </QuadTree>\n    </Html>\n  </LayerCake>\n</div>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    position: relative;\n    width: 100%;\n    height: 400px;\n  }\n\n  .circle {\n    position: absolute;\n    border-radius: 50%;\n    background-color: rgba(171, 0, 214);\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n    width: 10px;\n    height: 10px;\n  }\n</style>"},"dek":"","components":[{"title":"./_components/Scatter.webgl.svelte","contents":"<!--\n  @component\n  Generates a a WebGl scatter plot.\n -->\n<script>\n  import reglWrapper from 'regl';\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  /** @type {Number} [r=5] - The circle's radius. */\n  export let r = 5;\n\n  /** @type {String} [fill='#0cf'] - The circle's fill color. */\n  export let fill = '#0cf';\n\n  export let stroke = '#000'; // Not yet implemented\n  // export let strokeWidth = 0;\n\n  function hexToRgbPercent(hex) {\n    let str = hex.replace('#', '');\n    if (str.length === 3) {\n      str = str[0] + str[0] + str[1] + str[1] + str[2] + str[2];\n    }\n    return str.match(/.{1,2}/g).map(d => parseInt(d, 16) / 255);\n  }\n\n  const { gl } = getContext('gl');\n\n  function resize() {\n    if ($gl) {\n      const canvas = $gl.canvas;\n      // Lookup the size the browser is displaying the canvas.\n      const displayWidth = canvas.clientWidth;\n      const displayHeight = canvas.clientHeight;\n\n      // Check if the canvas is not the same size.\n      if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n        // Make the canvas the same size\n        canvas.width = displayWidth;\n        canvas.height = displayHeight;\n      }\n      $gl.viewport(0, 0, canvas.width, canvas.height);\n    }\n  }\n\n  let regl;\n\n  function render() {\n    if ($gl) {\n      regl = reglWrapper({\n        gl: $gl,\n        extensions: ['oes_standard_derivatives']\n      });\n\n      regl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n      });\n\n      const draw = regl({\n        // circle code comes from:\n        // https://www.desultoryquest.com/blog/drawing-anti-aliased-circular-points-using-opengl-slash-webgl/\n        frag: `\n        #extension GL_OES_standard_derivatives : enable\n        precision mediump float;\n        uniform vec3 fill_color;\n        uniform vec3 stroke_color;\n        varying float s_s;\n        void main () {\n\n          vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n\n          float dist = dot(cxy, cxy);\n\n          float delta = fwidth(dist);\n\n          float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, dist);\n\n          float outer_edge_center = 1.0 - s_s;\n          float stroke = 1.0 - smoothstep(outer_edge_center - delta, outer_edge_center + delta, dist);\n\n          // gl_FragColor = vec4(fill_color,1.0) * alpha;\n          gl_FragColor = vec4( mix(stroke_color, fill_color, stroke), 1.0 ) * alpha;\n          gl_FragColor.rgb *= gl_FragColor.a;\n        }`,\n        vert: `\n        precision mediump float;\n        attribute vec2 position;\n        attribute float r;\n        attribute float stroke_size;\n\n        varying float s_s;\n\n        uniform float stage_width;\n        uniform float stage_height;\n\n        // http://peterbeshai.com/beautifully-animate-points-with-webgl-and-regl.html\n        vec2 normalizeCoords(vec2 position) {\n          // read in the positions into x and y vars\n          float x = position[0];\n          float y = position[1];\n          return vec2(\n            2.0 * ((x / stage_width) - 0.5),\n            // invert y to treat [0,0] as bottom left in pixel space\n            -(2.0 * ((y / stage_height) - 0.5))\n          );\n        }\n\n        void main () {\n          s_s = stroke_size;\n          gl_PointSize = r;\n          gl_Position = vec4(normalizeCoords(position), 0.0, 1.0);\n        }`,\n        attributes: {\n          // There will be a position value for each point\n          // we pass in\n          position: (context, props) => {\n            return props.points.map(point => {\n              return [$xGet(point), $yGet(point)];\n            });\n          },\n          r: (context, props) => {\n            // const m = window.devicePixelRatio > 1 ? 4.0 : 2.0\n            // If using an r-scale, set width here\n            return props.points.map(p => props.pointWidth);\n          },\n          stroke_size: (context, props) => {\n            // If using an r-scale, set that here\n            return props.points.map(p => 0);\n          }\n        },\n        uniforms: {\n          fill_color: hexToRgbPercent(fill),\n          // stroke_color: [0.6705882352941176, 0, 0.8392156862745098],\n          stroke_color: hexToRgbPercent(stroke),\n          // FYI: there is a helper method for grabbing\n          // values out of the context as well.\n          // These uniforms are used in our fragment shader to\n          // convert our x / y values to WebGL coordinate space.\n          stage_width: regl.context('drawingBufferWidth'),\n          stage_height: regl.context('drawingBufferHeight')\n        },\n        count: (context, props) => {\n          // set the count based on the number of points we have\n          return props.points.length;\n        },\n        primitive: 'points',\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'src alpha',\n            srcAlpha: 'src alpha',\n            dstRGB: 'one minus src alpha',\n            dstAlpha: 'one minus src alpha'\n          }\n        },\n        depth: { enable: false }\n      });\n\n      draw({\n        pointWidth: r * 2,\n        points: $data\n      });\n    }\n  }\n\n  $: $width, $height, $gl, resize(), render();\n</script>"},{"title":"./_components/AxisX.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML x-axis, useful for server-side rendered charts. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=6] - The length of the tick mark. */\n  export let tickMarkLength = 6;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapLabels=false] - Instead of centering the text labels on the first and the last items, align them to the edges of the chart. */\n  export let snapLabels = false;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the yRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=0] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = 0;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: tickLen = tickMarks === true ? tickMarkLength ?? 6 : 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $xScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($xScale.ticks())\n        : $xScale.ticks(ticks);\n\n  $: halfBand = isBandwidth ? $xScale.bandwidth() / 2 : 0;\n</script>\n\n<div class=\"axis x-axis\" class:snapLabels>\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $xScale(tick)}\n\n    {#if baseline === true}\n      <div class=\"baseline\" style=\"top:100%; width:100%;\"></div>\n    {/if}\n\n    {#if gridlines === true}\n      <div class=\"gridline\" style:left=\"{tickValUnits}{units}\" style=\"top:0; bottom:0;\"></div>\n    {/if}\n    {#if tickMarks === true}\n      <div\n        class=\"tick-mark\"\n        style:left=\"{tickValUnits + halfBand}{units}\"\n        style:height=\"{tickLen}px\"\n        style:bottom=\"{-tickLen - tickGutter}px\"\n      ></div>\n    {/if}\n    <div\n      class=\"tick tick-{i}\"\n      style:left=\"{tickValUnits + halfBand}{units}\"\n      style=\"top:calc(100% + {tickGutter}px);\"\n    >\n      <div\n        class=\"text\"\n        style:top=\"{tickLen}px\"\n        style:transform=\"translate(calc(-50% + {dx}px), {dy}px)\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .tick-mark {\n    border-left: 1px solid #aaa;\n  }\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  /* This looks a little better at 40 percent than 50 */\n  .axis.snapLabels .tick:last-child {\n    transform: translateX(-40%);\n  }\n  .axis.snapLabels .tick.tick-0 {\n    transform: translateX(40%);\n  }\n</style>"},{"title":"./_components/AxisY.percent-range.html.svelte","contents":"<!--\n  @component\n  Generates an HTML y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the tickMarks in the middle of the bandwidth.\n\n  Although this is marked as a percent-range component, you can also use it with a normal scale with no configuration needed. By default, if you have `percentRange={true}` it will use percentages, otherwise it will use pixels. This makes this component compatible with server-side and client-side rendered charts. Set the `units` prop to either `'%'` or `'px'` to override the default behavior.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { xRange, yScale, percentRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [tickMarks=false] - Show marks next to the tick label. */\n  export let tickMarks = false;\n\n  /** @type {String} [labelPosition='even'] - Whether the label sits even with its value ('even') or sits on top ('above') the tick mark. Default is 'even'. */\n  export let labelPosition = 'even';\n\n  /** @type {Boolean} [snapBaselineLabel=false] - When labelPosition='even', adjust the lowest label so that it sits above the tick mark. */\n  export let snapBaselineLabel = false;\n\n  /** @type {Boolean} [gridlines=true] - Show gridlines extending into the chart area. */\n  export let gridlines = true;\n\n  /** @type {Number} [tickMarkLength=undefined] - The length of the tick mark. If not set, becomes the length of the widest tick. */\n  export let tickMarkLength = undefined;\n\n  /** @type {Function} [format=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let format = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [tickGutter=0] - The amount of whitespace between the start of the tick and the chart drawing area (the xRange min). */\n  export let tickGutter = 0;\n\n  /** @type {Number} [dx=0] - Any optional value passed to the `dx` attribute on the text label. */\n  export let dx = 0;\n\n  /** @type {Number} [dy=-3] - Any optional value passed to the `dy` attribute on the text label. */\n  export let dy = -3;\n\n  /** @type {Number} [charPixelWidth=7.25] - Used to calculate the widest label length to offset labels. Adjust if the automatic tick length doesn't look right because you have a bigger font (or just set `tickMarkLength` to a pixel value). */\n  export let charPixelWidth = 7.25;\n\n  /** @type {String} units - Whether this component should use percentage or pixel values. If `percentRange={true}` it defaults to `'%'`. Options: `'%'` or `'px'`. */\n  export let units = $percentRange === true ? '%' : 'px';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks)\n    ? ticks\n    : isBandwidth\n      ? $yScale.domain()\n      : typeof ticks === 'function'\n        ? ticks($yScale.ticks())\n        : $yScale.ticks(ticks);\n\n  function calcStringLength(sum, val) {\n    if (val === ',' || val === '.') return sum + charPixelWidth * 0.5;\n    return sum + charPixelWidth;\n  }\n\n  $: tickLen =\n    tickMarks === true\n      ? labelPosition === 'above'\n        ? tickMarkLength ?? widestTickLen\n        : tickMarkLength ?? 6\n      : 0;\n\n  $: widestTickLen = Math.max(\n    10,\n    Math.max(...tickVals.map(d => format(d).toString().split('').reduce(calcStringLength, 0)))\n  );\n\n  $: x1 = -tickGutter - (labelPosition === 'above' ? widestTickLen : tickLen);\n  $: halfBand = isBandwidth ? $yScale.bandwidth() / 2 : 0;\n\n  $: maxTickValUnits = Math.max(...tickVals.map($yScale));\n</script>\n\n<div class=\"axis y-axis\">\n  {#each tickVals as tick, i (tick)}\n    {@const tickValUnits = $yScale(tick)}\n\n    <div\n      class=\"tick tick-{i}\"\n      style=\"left:{$xRange[0]}{units};top:{tickValUnits + halfBand}{units};\"\n    >\n      {#if gridlines === true}\n        <div class=\"gridline\" style=\"top:0;\" style:left=\"{x1}px\" style:right=\"0px\"></div>\n      {/if}\n      {#if tickMarks === true}\n        <div class=\"tick-mark\" style:top=\"0\" style:left=\"{x1}px\" style:width=\"{tickLen}px\"></div>\n      {/if}\n      <div\n        class=\"text\"\n        style:top=\"0\"\n        style:text-align={labelPosition === 'even' ? 'right' : 'left'}\n        style:width=\"{widestTickLen}px\"\n        style:left=\"{-widestTickLen - tickGutter - (labelPosition === 'even' ? tickLen : 0)}px\"\n        style:transform=\"translate({dx + (labelPosition === 'even' ? -3 : 0)}px, calc(-50% + {dy +\n          (labelPosition === 'above' ||\n          (snapBaselineLabel === true && tickValUnits === maxTickValUnits)\n            ? -3\n            : 4)}px))\"\n      >\n        {format(tick)}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 11px;\n    width: 100%;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"},{"title":"./_components/QuadTree.html.svelte","contents":"<!--\n  @component\n  Creates an interaction layer (in HTML) using [d3-quadtree](https://github.com/d3/d3-quadtree) to find the nearest datapoint to the mouse. This component creates a slot that exposes variables `x`, `y`, `found` (the found datapoint), `visible` (a Boolean whether any data was found) and `e` (the event object).\n\n  The quadtree searches across both the x and y dimensions at the same time. But if you want to only search across one, set the `x` and `y` props to the same value. For example, the [shared tooltip component](https://layercake.graphics/components/SharedTooltip.html.svelte) sets `y='x'` since it's nicer behavior to only pick up on the nearest x-value.\n -->\n<script>\n  import { getContext } from 'svelte';\n  import { quadtree } from 'd3-quadtree';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  let visible = false;\n  let found = {};\n  let e = {};\n\n  /** @type {String} [x='x'] â€“ The dimension to search across when moving the mouse left and right. */\n  export let x = 'x';\n\n  /** @type {String} [y='y'] â€“ The dimension to search across when moving the mouse up and down. */\n  export let y = 'y';\n\n  /** @type {Number|undefined} [searchRadius] â€“ The number of pixels to search around the mouse's location. This is the third argument passed to [`quadtree.find`](https://github.com/d3/d3-quadtree#quadtree_find) and by default a value of `undefined` means an unlimited range. */\n  export let searchRadius = undefined;\n\n  /** @type {Array<Object>|undefined} [dataset] â€“ The dataset to work off ofâ€”defaults to $data if left unset. You can pass override the default here in here in case you don't want to use the main data or it's in a strange format. */\n  export let dataset = undefined;\n\n  $: xGetter = x === 'x' ? $xGet : $yGet;\n  $: yGetter = y === 'y' ? $yGet : $xGet;\n\n  function findItem(evt) {\n    e = evt;\n\n    const xLayerKey = `layer${x.toUpperCase()}`;\n    const yLayerKey = `layer${y.toUpperCase()}`;\n\n    found = finder.find(evt[xLayerKey], evt[yLayerKey], searchRadius) || {};\n    visible = Object.keys(found).length > 0;\n  }\n\n  $: finder = quadtree()\n    .extent([\n      [-1, -1],\n      [$width + 1, $height + 1]\n    ])\n    .x(xGetter)\n    .y(yGetter)\n    .addAll(dataset || $data);\n</script>\n\n<div\n  class=\"bg\"\n  on:mousemove={findItem}\n  on:mouseout={() => (visible = false)}\n  on:blur={() => (visible = false)}\n  role=\"tooltip\"\n></div>\n<slot x={xGetter(found) || 0} y={yGetter(found) || 0} {found} {visible} {e}></slot>\n\n<style>\n  .bg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}],"jsons":[]}